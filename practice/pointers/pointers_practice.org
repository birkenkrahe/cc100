#+TITLE:C pointers practice
#+STARTUP: overview hideblocks
#+OPTIONS: toc:1 num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :results output :comments both
* README

  * Practice workbook for pointers in C
  * See GitHub for script/solutions

* Emacs setup (optional)
** Hide emphatic characters like ~, *

   To *not* see the emphatic characters like ~ or * or / in the Org file
   text, run the following code chunk (or put the code in your ~/.emacs~
   file): if successful, you should see ~"t"~ in the minibuffer.

   #+begin_src emacs-lisp :results silent
     (setq-default org-hide-emphasis-markers t)
   #+end_src

   This will only work for new buffers. If you don't put it in your
   ~/.emacs~ file, the command will only work for the current Emacs
   session.

   *Close and reopen this file to see an effect.*

** Change your theme

   * In Emacs, type ~M-x custom-themes~
   * In the buffer that appears, select ~Leuven~
   * Select ~Apply and Save Setting~
   * This will work immediately

* Indirection operator

  Put the code from the diagram into the code block below and run it
  to confirm the claims.
  - Make sure you declare your variables!
  - Comment your code to indicate you know what you're doing

  #+attr_html: :width 500px
  #+caption: indirection operator (Source: King)
  [[./indirection.png]]

  #+begin_src C

  #+end_src

* Initializing pointers

  * [ ] The initialization of the pointer ~iPtr~ in the following code
    block went wrong:
    - Fix the initialization so that the pointer is assigned an
      address, not a value
    - Print the pointer variable ~ptr~, the address and value of ~x~

      You should get this output:
      #+begin_example
        0061FEC0 0061FEC0 2.71828
      #+end_example

      Code:
    #+begin_src C
      double x = 3.14159;
      double *ptr;

      // initialize pointer
      ptr = x;      // ptr is assigned the address of x
      ptr = 2.71828; // value of x is indirectly changed to e

      // print pointer, address and value of i
      ...
    #+end_src

* Fix the program

  * The following function supposedly computes the sum and average of
    the numbers in the array ~a~, which has length ~n~. The variables ~avg~
    and ~sum~ /point/ to variables that the function should modify.

    Unfortunately, the function contains several errors:
    - find and correct them so that the code compiles

    #+name: sum1
    #+begin_src C :results silent
      void avg_sum (double a[], int n, double *avg, double *sum) {
	int i;
	sum = 0.0;
	for (i = 0; i < n; i++) {
	  sum += a[i];
	}
	avg = sum / n;
      } // end of function
    #+end_src
