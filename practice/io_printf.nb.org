#+TITLE:Formatted I/O
#+AUTHOR:Marcus Birkenkrahe
#+Source: KN King C Programming
#+SUBTITLE:CSC 100 Introduction to programming in C/C++
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h>
#+PROPERTY: header-args:C :exports both :comments both
* README

  * There is much more to ~scanf~ and ~printf~ than we've seen

  * I/O is where the pedal hits the metal - where man meets machine

  * In this notebook: conversion specifications for printf

** printf

   When it is called, ~printf~ must be supplied with
   1) a format string, like ~"The output is: %d\n~
   2) any number of values to be inserted into the string at printing

*** Conversion specification

    * A *conversion specification* is a placeholder like ~d~

    * Binary (machine) format is converted to printed (human) format

    * General form: ~%m.pX~ where

      |   | WHAT                  | EXAMPLE                             |
      |---+-----------------------+-------------------------------------|
      | m | minimum field width   | ~%4d~ prints ~123~ as ~_123~        |
      | p | precision after point | ~%.3f~ prints ~3.141593~ as ~3.142~ |
      | X | conversion specifier  | ~d~, ~e~, ~f~, ~g~                  |

    * [ ] Let's check! Add the examples from the first two lines of
      the table in the code block [[mpx]] and run it.

      #+name: mpx
      #+begin_src C


      #+end_src

    * The precision p depends on the conversion specifier X

**** INTEGER DECIMAL "d"

	 #+begin_quote
	 ~d~ displays an integer in decimal (= base 10) form. p is the
	 minimum number of digits to display the integer. Default p=1.
	 #+end_quote

       * [ ] Get coding! Show that the default for ~d~ is p=1. Print the
	 numbers 1, 1, 100 and 10000 with the specifiers ~%d~, ~%.1d~,
	 ~%.5d~, ~%.2d~. Print each expression on its own line.

	 #+name: spec
	 #+begin_src C




	 #+end_src

**** FLOATING POINT EXPONENTIAL "e"

	    #+begin_quote
	    ~e~ displays a floating-point number in exponential
	    ("scientific") notation.  p = digits after decimal point. If
	    p=0, no decimal point is displayed.
	    #+end_quote

	  * [ ] Get coding! Print 1, 1000, and 1000000000000000 using
	    %e%. Print each expression on its own line.

	  #+begin_src C



	  #+end_src

**** FLOATING POINT FIXED DECIMAL "f"

	       That's ~f~ as we already know it from many other examples. The
	       precision p is defined as for ~e~. Trailing zeroes are shown.

**** VARIABLE FLOATING POINT "g"

		  #+begin_quote
		  ~g~ displays a floating point number in either exponential
		  format or fixed decimal format depending on the number's size. p
		  is the maximum number of *significant* digits (*not* digits
		  after the decimal point!) to be displayed. No trailing zeroes
		  are shown. If there are no decimal digits after the decimal
		  point, no decimal point is shown.
		  #+end_quote

		* [ ] Get coding! Use ~g~ to display the numbers: 200, 3.142574654
		  with p=8, 2.71 - print each on a line of its own, but use only
		  *one* ~printf~ statement to do it!

		#+begin_src C



		#+end_src

