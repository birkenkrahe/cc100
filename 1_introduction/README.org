#+TITLE:Introduction to C
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP:overview
#+OPTIONS: toc:1
#+OPTIONS:hideblocks
* What will you learn?

  * What is C?
  * What is its origin?
  * What is its importance?
  * What's the difference to C++?
  * Why are we not just learning C++?
  * What are C's strengths and weaknesses?
  * Why are you learning C from me?
  * What's next in the course?

  Source: King (2008) ch.1[fn:1] - see also [[https://docs.google.com/presentation/d/16jVt1LYw_an7na_Ex0bz8l2uySJtydBK/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][slides (GDrive)]]
  -----
* What is C?

  | C is a programming language created in the early 1970s. |

  #+caption: Thompson & Ritchie & DEC PDP-11, 1970. (Brock, 2019)
  #+attr_html: :width 600px
  [[./img/unix.png]]

* How popular is C?

  | C consistently ranks among the top 3 programming languages |

  #+caption: TIOBE Index for C, 2002-2022 (Source: TIOBE)
  #+attr_html: :width 700px
  [[./img/tiobe.png]]

  Popularity contest: cp. [[https://www.tiobe.com/tiobe-index/][TIOBE Index]][fn:2]

* How important is C?

  #+caption: Real world applications of C (Source: DataFlair)
  #+attr_html: :width 600px
  [[./img/usage.jpg]]

  Some well-known programs written in C:
  * The Linux kernel (and therefore, Android)
  * UNIX operating system (core of MacOS)
  * Windows 1.0 to Windows XP
  * Doom (early video game)
  * Wolfenstein 3D
  * Git version control system
  * Clang and MinGW compilers
  * ...Any software that crosses platforms easily...

  See also: "[[https://youtu.be/smGalmxPVYc][Why C programming is awesome]]" (Hawkes, 2016).

* What is a programming language?

  #+begin_quote
  "A programming language is a formal language comprising of a set of
  strings that produce various kinds of machine code output. Programming
  languages are one kind of computer language, and are used in computer
  programming to implement algorithms." (Source: [[https://en.wikipedia.org/wiki/Programming_language][Wikipedia]])
  #+end_quote

  * *Formal* language?
  * Set of *strings*?
  * *Machine* code?
  * *Algorithm*?

    | Fortunately, computer (and data) science isn't really a science at all! |

    Right, it's more of a craft like mining, knitting, or pottering.

    #+caption: Scientific fields arranged by "purity" (xkcd)
    #+attr_html: :width 700px
    [[./img/purity.png]]

* Where does C come from?

  #+caption: "K&R" (Kernighan/Ritchie, 1978)
  #+attr_html: :width 300px
  [[./img/kr.png]]

  * By-product of the UNIX operating system 1969 [fn:3]
  * Developed on DEC PDP-7 (computer with 8K words of main memory)
  * Written originally in assembly language
  * UNIX rewritten in C by 1973 for [[https://en.wikipedia.org/wiki/PDP-11][DEC PDP-11]]
  * Standardization of C, 1973-2018

  | Challenge: what does "8K words of main memory" mean? [fn:4] |

* Standardization

  #+caption: How standards proliferate (Source: xkcd)
  #+attr_html: :width 500px
  [[./img/standards.png]]

  Details: see [[https://blog.ansi.org/2018/11/c-language-standard-iso-iec-9899-2018-c18/#gref][ANSI]] (American National Standards Institute)

* How computers work

  Well, at least this is one way of looking at it.

  #+caption: Computer architecture (simplified)
  #+attr_html: :width 700px
  [[./img/computer.png]]

  | What happens when you write a program in C? |

* How programs are processed

  #+caption: How programs are processed (simplified)
  #+attr_html: :width 00px
  [[./img/program.png]]

* Looks matter

  She's a beauty.

  #+caption: PDP-11/70
  #+attr_html: :width 500px
  [[./img/pdp11.jpg]]

  | Challenge: was C the first programming language? [fn:5] |

* The Latin of programming languages

  The following languages are C-based:
  * C++ (OOP extension of C, games)
  * Java (OOP, VM-portable, and no pointers)
  * C# (Microsoft, games)
  * Perl (scripting, text mining)

  #+begin_quote
  "C is to programming languages what Latin is to Western natural
  languages." (Anonymous)
  #+end_quote

* C is lightning fast and terribly tiny

  #+begin_quote
  "C is fast because it's the speed of light, and relativity?"
  ([[https://stackoverflow.com/questions/418914/why-is-c-so-fast-and-why-arent-other-languages-as-fast-or-faster][Stackoverflow]])
  #+end_quote

  [[./img/fast.png]]

  ...

  [[./img/slow.png]]
  /Image source: [[https://github.com/kostya/benchmarks][Kostya benchmark, GitHub, Nov 2021]]/

  * Excerpts for parsing and printing a Mandelbrot set
  * Benchmarks depend on algorithm implementation
  * C always wins the size battle (memory allocation)
  * Some very specialized languages are even faster

* Strengths and weaknesses of C

  | STRENGTH              | WEAKNESS                     |
  |-----------------------+------------------------------|
  | Efficiency            | Permissiveness (Error-prone) |
  | Portability           | Terseness and Understanding  |
  | Power                 | Large program maintenance    |
  | Flexibility           |                              |
  | Standard library      |                              |
  | Integration with UNIX |                              |

* What is the difference between C and C++?

  C++ is a superset of C.

  #+caption: C/C++ logos
  #+attr_html: :width 400px
  [[./img/ccpp.png]]

  | WHAT | C                      | C++                |
  |------+------------------------+--------------------|
  | TIME | Thompson/Ritchie 1970s | Stroustrup 1980s   |
  | TYPE | Imperative procedural  | Object-oriented    |
  | GOOD | System programming     | Games and graphics |
  | USED | Internet of Things     | Flight Software    |

  Source: [[lemonaki][Lemonaki, 2021]]

* Why are we not just learning C++?

  * Object-orientation is a difficult paradigm (C++)
  * System programming is pure power (C)
  * C is simpler, smaller, and faster

  #+caption: Computer Landscape. (Modified from: Steinhart)
  #+attr_html: :width 800px
  [[./img/power2.png]]

  - Bjarne Stroustrup (2011): "[[https://youtu.be/KlPC3O1DVcg][C is obsolete]]"[fn:6]
  - Linus Torvalds (2007): "[[http://harmful.cat-v.org/software/c++/linus][C++ is a horrible language]]"[fn:7].

  Also, there's this:

  #+begin_quote
  "Languages are tools. Memorizing them no more makes you a computer
  scientist than studying hammers makes you a carpenter." -[[https://qr.ae/pGzZ9z][Neilsen]]
  #+end_quote

  * It's easy to pick up additional languages
  * Data structures and algorithms are key to understanding
  * First language could be anything[fn:8]

* Why am I teaching C/C++?

  It's personal.

  #+caption: The C++ Virtual Library, 1993-1995 (DESY)
  #+attr_html: :width 500px
  [[./img/desy.png]]

  #+begin_quote
  I used C++ during my PhD studies at DESY, Germany, to write a
  library of multigrid functions (numerical method for lattice gauge
  theory simulations in theoretical particle physics).
  #+end_quote

* What will happen to C/C++ in the next 20 years?

  Whatever happens, good new for learning C.
  
  #+caption: One expert's opinion (Source: Quora)
  #+attr_html: :width 500px
  [[./img/future.png]]

  I increasingly see propaganda for [[https://www.incredibuild.com/blog/rust-vs-c-and-is-it-good-for-enterprise][replacing C++ by Rust]] (Kirsh,
  2021), another relatively new language with OOP support and better
  security properties.
  
* Summary

  * The C programming language was created 50 years ago
  * C is small, simple, very fast, and close to the computer
  * Linux (and Android) are largely written in C
  * The object-oriented programming (OOP) language C++ contains C
  * System programming is a powerful skill set
    
** Concept glossary

   | CONCEPT/TOPIC           | DEFINITION                                          |
   |-------------------------+-----------------------------------------------------|
   | DEC PDP-11              | 1970s mainframe computer                            |
   | UNIX                    | Operating system (ca. 1969)                         |
   | ANSI                    | American National Standard Institute                |
   | String                  | A data type representing text                       |
   | Assembler               | Machine code (hard to write/read)                   |
   | Algorithm               | Fixed process or set of rules                       |
   | Linux                   | Operating system (ca. 1991)                         |
   | C                       | Imperative, procedural programming language         |
   | compiler                | Software to translate source into machine code      |
   | C++                     | Object-oriented (OO) superset of C                  |
   | Clang                   | C/C++ compiler                                      |
   | gcc                     | GNU compiler bundle (incl. C/C++)                   |
   | Java,C#                 | OO programming language                             |
   | Perl                    | Scripting language                                  |
   | Git                     | Software version control system                     |
   | GitHub                  | Developer's platform (owned by Microsoft)           |
   | Library                 | Bundle of useful functions and routines             |
   | Portability             | Ability of software to run on different hardwares   |
   | Efficiency              | Software speed of execution and memory requirements |
   | Permissiveness          | Degree to which a language tolerates ambiguities    |
   | Object-orientation      | Ability to define abstractions                      |
   | System programming      | Programming close to the machine                    |
   | Application programming | Programming close to the user                       |

* What's next?

  - Getting started: Infrastructure (Lab)
  - MinGW (compiler) + Emacs (editor) + GitHub (collaboration)
  - First program: "hello world" (Lecture + Lab)

  [[./img/river.gif]]

* References

  * Big Think (Jun 13, 2011). Bjarne Stroustrup: Why the Programming
    Language C Is Obsolete | Big Think [video]. [[https://youtu.be/KlPC3O1DVcg][URL:
    youtu.be/KlPC3O1DVcg]].
  * Brock (October 17, 2019). The Earliest Unix Code: An Anniversary
    Source Code Release [Blog]. URL: [[https://computerhistory.org/blog/the-earliest-unix-code-an-anniversary-source-code-release/][computerhistory.org]].
  * Chatley R., Donaldson A., Mycroft A. (2019) The Next 7000
    Programming Languages. In: Steffen B., Woeginger G. (eds)
    Computing and Software Science. Lecture Notes in Computer Science,
    vol 10000. Springer,
    Cham. https://doi.org/10.1007/978-3-319-91908-9_15
  * Data Flair (n.d.). Applications of C Programming That Will Make
    You Fall In Love With C [Tutorial]. URL: d[[https://data-flair.training/blogs/applications-of-c/][ata-flair.training.]]
  * DESY (Oct 25, 1995). The C++ Virtual Library. URL: [[https://www.desy.de/user/projects/C++.html][desy.de]]
  * Gustedt (2019). Modern C. Manning.
  * Kernighan/Ritchie (1978). The C Programming Language. Prentice
    Hall. [[https://en.wikipedia.org/wiki/The_C_Programming_Language][Online: wikipedia.org]].
  * King (2008). C Programming - A Modern Approach. Norton. [[http://knking.com/books/c2/index.html][Online:
    knking.com]].
  * Kirsh (September 13, 2021). Rust vs C++ and Is It Good for
    Enterprise? [blog]. [[https://www.incredibuild.com/blog/rust-vs-c-and-is-it-good-for-enterprise][URL: www.incredibuild.com]].
  * Lemonaki, Dionysia (November 4, 2021). C vs. C++ - What's The
    Difference [blog]. URL: [[https://www.freecodecamp.org/news/c-vs-cpp-whats-the-difference/][freecodecamp.org.]]
  * Neilsen (Aug 14, 2020). Quora. URL: [[https://qr.ae/pGzZ9z][qr.ae/pGzZ9z]].
  * Steinhart (2019). The Secret Life of Programs. NoStarch
    Press. [[https://nostarch.com/foundationsofcomp][URL: nostarch.com.]]
  * TIOBE (Jan 2022). TIOBE Index for January 2022 [website]. [[https://www.tiobe.com/tiobe-index/][URL:
    tiobe.com]].
  * Torvalds (6 Sep 2007). Linus Torvalds on C++ [blog]. [[http://harmful.cat-v.org/software/c++/linus][URL:
    harmful.cat-v.org]].
  * xkcd(n.d.) Purity [cartoon]. [[https://xkcd.com/435/][URL: xkcd.com/]].

* Footnotes

[fn:1]All sources are referenced at the end of the script, followed by
the footnotes, which do unfortunately not render as links [[https://github.com/birkenkrahe/cc100/tree/main/history_of_c][on
GitHub]]. The book by King (2008) does not cover a few recent updates to
the ANSI standard for C, like C11, and the current standard C17. The
next major C standard revision (C23) is expected for 2023. Gustedt
(2019) is a good book on "modern C".

[fn:2]Since 2000, C has consistently ranked among the top two
languages in the TIOBE index (based on searches).

[fn:3]The motivation to create Unix, according to [[https://en.wikipedia.org/wiki/Space_Travel_(video_game)][Wikipedia]], was to
port Thompson's space travel video game to the PDP-7 mainframe
computer. So in a way we owe modern computing to gaming.

[fn:4]How many bits can be stored in memory of 8K words depends on the
bit length of a word (or byte). One byte holds 8 = 2^3 bits (binary
digits, or memory locations capable of storing 2 states). 8K byte
correspond to 8 * 2^10 = 8 * 1,024 = 8,192 bits. By comparison, the
main memory of my laptop is 16GB = 16 * 2^30 = 3.2E+31 bits. It
follows that UNIX (and C) had to be designed to be very small, or
space effective.

[fn:5]Answer: no. By 1966, there were already ca. 700 programming
languages (Chatley et al, 2019), today there are almost 9,000. C
descends from ALGOL60, other important languages are Lisp (functional
language), SIMULA (first OOP language), and PROLOG (logic language).

[fn:6]However, he is biased, since he is the creator of C++. The title
of the video is misleading: Stroustrup believes that every C program
should rather be a proper C++ program. However, he also concedes that
C++ is still too complex for many ("We have to clean it up").

[fn:7]Torvalds (who wrote the Linux kernel in C) argues here in favor
of writing his hugely successful version control program ~git~ in C
instead of C++. He highlights some of the strengths of C: efficient,
system-level, portable code.

[fn:8]My first real programming language was FORTRAN (specialized on
scientific computing), then C++. Recently, I picked up R (for data
science). In between I've sampled (not mastered) many others,
including: Python, Lisp, PROLOG, C, PHP, SQL, SQLite etc.
