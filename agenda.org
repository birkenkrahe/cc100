#+TITLE:CC Agenda
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: CSC 100 - Spring 2022
#+OPTIONS: toc:1
#+STARTUP: overview hideblocks
#+PROPERTY: header-args:C :main yes :includes <stdio.h>
* README

  This file contains the agenda overview (what I had planned), the
  objectives (what we managed to do) and (much of the) content of each
  taught session of the course. I want to avoid splitting the content
  up over many files - so that you have to navigate as little as
  possible (like a book)!

  The companion file to this file, less structured and with the
  captain's log, is the [[./notes.org][notes.org]] file.

* Welcome to the course - w1s1 (01/12/22)
** Welcome
   #+attr_html: :width 500px
   [[./img/fivearmies.jpg]]

   * Introduction to the course & the lecturer
   * Homework assignment: GitHub Hello World
   * What's next?

** Entry survey ([[https://docs.google.com/forms/d/1OYm9fMBi8LNAlbRSo3hiRzsLL0psOuF7TmyoYj9U4kM/edit#responses][Google Forms]])

   #+attr_html: :width 600px
   #+caption: What's your operating system? (Spring 2022 survey)
   [[./img/os.png]]

** Introduction to the course & the lecturer

   #+attr_html: :width 400px
   [[./img/mb.jpg]]

   * PhD theoretical particle physics / WWW development

   * C/C++ since ca. 1990 (created multigrid library)

   * Professor, [[https://en.wikipedia.org/wiki/Business_informatics#:~:text=Business%20informatics%20(BI)%20is%20a,and%20concepts%20of%20computer%20science.&text=The%20focus%20on%20programming%20and,of%20economics%20and%20information%20technology.][Business Informatics]] @Berlin Univ

   * Visiting Assoc Prof for Data Science @Lyon (2021-23)

   * Syllabus for this course ([[https://lyon.schoology.com/course/5516220826/materials/gp/5523144577][Schoology]])

** Homework assignments week 1 (14-Jan-2022)

   #+attr_html: :width 600px
   [[./img/homework.png]]

   * *GitHub Hello World Exercise ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][Info: FAQ]]) - by Friday 14-Jan!*

*** GitHub

**** What is it?

     * Software development platform (like GitLab, BitBucket,
       SourceForge, etc.)
     * Built around Git by Linus Torvalds
     * Bought by Microsoft in 2018 (like OpenAI - home of GPT3)
     * 77 mio users (developers) + 200+ mio software projects
     * AI support (e.g. [[https://copilot.github.com/][GitHub Copilot]] - AI-enabled code generator)

     Watch: "[[https://youtu.be/w3jLJU7DT5E][What is GitHub?]]" (GitHub, 2016)

     #+attr_html: :width 500px
     [[./img/github.gif]]
     /Gif: "So long binder of requirements" Source: GitHub/

**** Why are we using it?

     /Image: Org-mode file in GitHub/
     #+attr_html: :width 700px
     [[./img/org.png]]

     * It's free
     * To host course materials
     * Upload assignments (esp. Emacs Org-files)
     * Discussion
     * Wiki for collaboration
     * Complements Schoology

**** What will you have to do?

     * [[https://github.com][Sign up with GitHub]] - use Lyon Email
     * Pick an available username *using your own first and last name*
     * [[https://docs.github.com/en/get-started/quickstart/hello-world][Complete the "Hello World" exercise]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.md#completing-the-github-hello-world-exercise][FAQ]])
     * [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][Create an issue]] from the [[https://github.com/birkenkrahe/cc100/issues][~cc100~ repository]] like in the example
       below (except from your account instead of mine).

     /Image: Issue "Assignment completed"/
     #+attr_html: :width 500px
     [[./img/issue.png]]

     #+begin_quote
     If you do have a GitHub account already, do the exercise anyway
     using your existing account (it takes 10 min)! Make sure you
     let me know what your user name is so that I can add you to my
     repo.
     #+end_quote

**** What else can you do?

     * You can [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][fork]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~cc100~]] repository
     * You can [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions][watch]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~cc100~]] repository - and set [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications][~Notifications~]]
       to ~Participating and @mentions~ so that you see my comments
       (see image below).

     #+attr_html: :width 300px
     [[./img/watch.png]]
     /Image: Notifications settings when watching a repository/

     * You can [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][submit issues]] from the repository (e.g. if you notice
       mistakes or if you want extra information, or to share a link)
     * You can participate in [[https://github.com/birkenkrahe/cc100/discussions][discussions]] (sometimes I will make you)
     * You can add to the [[https://github.com/birkenkrahe/cc100/wiki][wiki]] (e.g. comments and links to interesting
       resources)
     * You can use it as a platform for [[https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects][projects]] or [[https://github.com/features/codespaces][coding]]
     * You can download the [[https://desktop.github.com/][desktop client]] to manage repos on your PC
       (see image below).

     /Image: GitHub desktop client commit/
     #+attr_html: :width 800px
     [[./img/gh.png]]

** What's next?

   #+attr_html: :width 500px
   [[./img/sunflowers.jpg]]

   * See schedule ([[https://github.com/birkenkrahe/cc100/blob/main/schedule.org][GitHub]])
   * Watch online lecture on "Systems" (to be done)
   * Later: online summary (~notes.org~ in [[https://github.com/birkenkrahe/cc100][GitHub]])
   * Sometimes: diary notes (~diary.org~ in [[https://github.com/birkenkrahe/cc100][GitHub]])
   * Class on Friday 14-Jan will be online!
   * Hope to see you at school next Monday!

* Git, GitHub, History of C - w1s2 (01/14/22)

** Overview

   | HOW      | WHAT                                  |
   |----------+---------------------------------------|
   | Review   | [[file:c:/Users/birkenkrahe/Documents/GitHub/Documents/GitHub/org/FAQ.org][GitHub Hello World exercise]] (see [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][FAQ]]) |
   | Lecture  | [[file:1_introduction/README.org::What will you learn?][Introduction to C]]                     |
   | Practice | Install C compiler ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-a-c-compiler-under-windows-and-macos][see FAQ]])          |
   |          | Set PATH environment variable         |
   |          | Test C compiler                       |

** Objectives

   * [X] Review the basics of Git and GitHub

   * [X] Understand what C is, and why you learn it

   * [ ] Install the GNU C and C++ compiler (~gcc~)

   * [ ] Set ~PATH~ environment variable under Windows

   * [ ] Test the C compiler

* Introduction to C and C++ - w2s3 (01/19/22)
** I'm back

   #+caption: "I'm back, baby."
   #+attr_html: :width 300px
   [[./img/back.jpg]]

** Overview

   | HOW      | WHAT                               | TIME |
   |----------+------------------------------------+------|
   | Review   | Quiz on last week's content        | 15'  |
   |          | Quiz: feedback discussion          | 5'   |
   | Lecture  | [[file:1_introduction/README.org][Introduction to C]] (cont'd)([[https://github.com/birkenkrahe/cc100/tree/main/1_introduction][gh]])     | 10'  |
   |          | [[~/Documents/GitHub/cc100/2_installation/README.org][Installation of tools]] ([[https://github.com/birkenkrahe/cc100/tree/main/2_installation][gh]])         |      |
   | Practice | Install C compiler[fn:1] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-a-c-compiler-under-windows-and-macos][see FAQ]]) |      |
   |          | Set PATH environment variable      |      |
   |          | Test C compiler                    |      |

   gh = GitHub link

** Objectives

   * [X] Review last week & discuss & get feedback on quiz 1

   * [X] Complete introduction to C (and C++)

   * [ ] Understand installation process (philosophy)

   * [ ] Install the GNU C and C++ compiler (~gcc~)

   * [ ] Set ~PATH~ environment variable under Windows

   * [ ] Test the C compiler

* Install C compiler, set PATH - w2s4 (01/21/22)
** Overview

   | HOW      | WHAT                               | TIME |
   |----------+------------------------------------+------|
   | Lecture  | [[~/Documents/GitHub/cc100/2_installation/README.org][Installation of tools]] ([[https://github.com/birkenkrahe/cc100/tree/main/2_installation][gh]])         |      |
   | Practice | Install C compiler[fn:2] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-a-c-compiler-under-windows-and-macos][see FAQ]]) |      |
   |          | Test C compiler ~gcc --version~    |      |
   |          | GNU Emacs tutorial in class ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][gh]])   |      |
   | HOME     | Set PATH environment variable      |      |

   gh = GitHub link

** Objectives

   * [X] Understand installation process (philosophy)

   * [X] Install the GNU C and C++ compiler (~gcc~)

   * [X] Set ~PATH~ environment variable under Windows

   * [X] Test the C compiler

   * [X] GNU Emacs tutorial

* Install GNU Emacs - w3s5 (01/24/22)
** Overview

   |------------+-----------------------------------------------|
   | HOW        | WHAT                                          |
   |------------+-----------------------------------------------|
   | Practice   | Emacs [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][training script]]                         |
   |            | See also [[https://youtube.com/playlist?list=PLwgb17bzeNyiuQtvKtcZ_pvSSoO9ShXv8][video playlist]]                       |
   |------------+-----------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5590403530][Assignment]] | Set ~.emacs~ init file in your home directory |
   |------------+-----------------------------------------------|

** Objectives

   * [X] Work through short tutorial for GNU Emacs

   * [X] Explain Emacs assignment

* Create GNU Emacs Org-mode file - w3s6 (01/26/22)
** Overview

   |------------+-----------------------------------------------------|
   | HOW        | WHAT                                                |
   |------------+-----------------------------------------------------|
   | Practice   | Set ~.emacs~ init file in your home directory       |
   |------------+-----------------------------------------------------|
   | Demo       | Creating Emacs Org-mode with C code and run it      |
   |------------+-----------------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5606518666][Assignment]] | Create Emacs Org-mode file ([[https://github.com/birkenkrahe/cc100/blob/main/assignments/org-mode/README.org][GitHub]])                 |
   |------------+-----------------------------------------------------|

** Objectives

   * [X] Understand Emacs initialization with ~.emacs~

   * [X] Learn how to create an Org-mode file

   * [ ] Run a C program inside Emacs
* GNU Emacs initialization file - w3s7 (01/28/22)

  1) We continue where we left it on Wednesday (w3s6)

  2) [[file:c:/Users/birkenkrahe/Documents/GitHub/Documents/GitHub/org/FAQ.org][Fixing the .emacs problem]] (FAQ)

  3) Finish [[file:assignments/1_orgmode/README.org][Org-mode assignment]] ([[https://github.com/birkenkrahe/cc100/blob/main/assignments/1_org-mode/README.org][GitHub]])

  4) Submit results [[https://github.com/birkenkrahe/cc100/issues][to GitHub as issue]] (ZIP) - by 11.59PM tonight

* GCC Lab session - w4s8 (01/31/22)

  #+caption: Teaching Emacs on Dagobah
  #+attr_html: :width 400px
  [[./img/yoda.jpg]]

  #+begin_quote
  We will hold a special lab session tomorrow, Monday 31 January
  11-11.50 AM, to sort out any issues related to Emacs or GCC. Bring
  your own PC to the session, or work on a lab desktop. I will spend the
  time going round to make sure that you can

  * Install/ open / use the Emacs editor
  * Create, run and tangle Org-mode files
  * Install / use the C compiler GCC
  * Understand the recent program assignments

  The necessary steps are also demonstrated [[https://www.youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][in this tutorial video
  playlist]].

  We will continue with our regular program on Wednesday, 2nd February
  at 11 AM - a short quiz will be available before.
  #+end_quote

  For those who know or can do all of this already: here's a [[https://github.com/birkenkrahe/cc100/blob/main/assignments/org-mode/2nd_assignment.org][second
  challenge]] (with solution) to practice while I sort others out.

* Structure of a C program - w4s9 (02/02/22)
** Overview

   |------------+-----------------------------+---------------------|
   | HOW        | WHAT                        | WHEN                |
   |------------+-----------------------------+---------------------|
   | [[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1D0tYkE_bW-7stmbgN4dJlEFyg1DRUch0%3Fusp%3Dsharing][Lecture]]    | C Fundamentals (King ch. 2) |                     |
   |------------+-----------------------------+---------------------|
   | [[https://github.com/birkenkrahe/cc100/blob/main/notes.org#the-punc-program][Practice]]   | Write and execute ~pun.c~   |                     |
   |------------+-----------------------------+---------------------|
   | [[https://lyon.schoology.com/assignment/5624884647][Assignment]] | Write a checkmarks program  | Friday, 4 Feb, 11AM |
   |------------+-----------------------------+---------------------|

** Objectives

   * [X] Understand the basic structure of a C program

   * [X] Write a simple, complete C program (~pun.c~)

   * [X] Submit simple assignment for Friday 4 Feb 11 AM

** Assignment: checkmark program

   Submit program and output as an Org-mode file. It should look like
   this (code block is folded):

   #+caption: Checkmarks solution (code block folded)
   #+attr_html: :width 600px
   [[./img/checkmarks.png]]

* Variable type declarations and assignments -  w5s10 (02/07/22)
** Overview

   |----------+--------------------------------+----------------------|
   | HOW      | WHAT                           | WHEN                 |
   |----------+--------------------------------+----------------------|
   | Review   | [[file:3_basics/README.org::README][Structure of a program]]         |                      |
   |----------+--------------------------------+----------------------|
   | [[file:3_basics/variables.org][Lecture]]  | C Fundamentals ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1D0tYkE_bW-7stmbgN4dJlEFyg1DRUch0%3Fusp%3Dsharing][King ch. 2]])    |                      |
   |----------+--------------------------------+----------------------|
   | Practice | Computing the weight of a box  |                      |
   |----------+--------------------------------+----------------------|
   | Test 1   | 10 from Quiz 1-3 + 10 new MPCs | Friday, 11 Feb, 11AM |
   |----------+--------------------------------+----------------------|
** Objectives

   * [X] Understand the framework for the first test

   * [X] Understand variable, data types and type declarations

   * [X] Understand variable assignments

   * [ ] Understand printing formats

   * [ ] Write a program with variable declarations and assignments

   * [ ] Understand printing formats

* Formatting printout -  w5s11 (02/09/22)
** Overview

   |----------+-------------------------------------------+----------------------|
   | HOW      | WHAT                                      | WHEN                 |
   |----------+-------------------------------------------+----------------------|
   | [[file:3_basics/variables.org][Lecture]]  | C Fundamentals ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1D0tYkE_bW-7stmbgN4dJlEFyg1DRUch0%3Fusp%3Dsharing][King ch. 2]])               |                      |
   |----------+-------------------------------------------+----------------------|
   | Practice | Interactive notebook: ~printf~ formatting |                      |
   |----------+-------------------------------------------+----------------------|
   | Test 1   | 10 from Quiz 1-3 + 10 new MPCs            | Friday, 11 Feb, 11AM |
   |----------+-------------------------------------------+----------------------|
** Objectives


   * [X] Understand printing formats

   * [X] Write a program with variable declarations and assignments

* Test review - w6s12 (02/14/22)
** Objectives

   * [X] Understand test results
   * [X] Know what to do different next time
   * [X] Discuss selected questions and answers

** Test results - stats and plots

   * The results are nothing to write home about - though > 50% means
     that the class passed (on average).
     #+caption: Test 1 results (Schoology)
     #+attr_html: :width 500px
     [[./img/test_1_stats.png]]

   * I am an obsessive fact-checker. When checking the stats with R, I
     find slightly different results:
     #+name: test 1 results
     #+begin_src R :exports both :session :results output
       results <- c(8.07,9.5,9.66,10.21,12.12,12.66,14,14.1,
                    14.75,14.75,14.97,15,15.75,17,19,19.36)
       sd(results)
       summary(results)
     #+end_src

     #+RESULTS: test 1 results
     :
     : [1] 3.288485
     :
     :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
     :    8.07   11.64   14.43   13.81   15.19   19.36

   * Let's make some plots: histogram, boxplot and density plot. I'dd
     like the histogram and the density plot (a smoothened histogram)
     to peak more to the right, and for the boxplot to be smaller and
     higher up.
     #+name: histogram
     #+begin_src R :exports both :session :results output graphics file :file ./img/test1hist.png
       hist(results, main="Histogram of test 1 results, CSC 100 Spring 2022")
     #+end_src

     #+RESULTS: histogram
     [[file:./img/test1hist.png]]

     #+name: boxplot
     #+begin_src R :exports both :session :results output graphics file :file ./img/test1box.png
       boxplot(results, main="Test 1 results, CSC 100 Spring 2022")
     #+end_src

     #+RESULTS: boxplot
     [[file:./img/test1box.png]]

     #+name: density
     #+begin_src R :exports both :session :results output graphics file :file ./img/test1density.png
       ave <- mean(results)
       d <- density(results)
       plot(d, col="steelblue",main="Test 1 Results CSC 100 Spring 2022")
       abline(v=ave,col="red")
     #+end_src

     #+RESULTS: density
     [[file:./img/test1density.png]]

** Analysis - feedback and action points

   * Test 1 can now be played an unlimited number of times. I have
     added feedback to all new questions.

   * There will not be another paper-based test: the results weren't
     much better than in other courses, and test preparation and
     grading are excruciating if partial credit is given.

   * What surprised me most was that many of you did not use the
     available time.

   * See also: [[https://github.com/birkenkrahe/org/blob/master/diary.org#i-can-teach-it-to-you-but-i-cannot-learn-it-for-you]["I can teach it to you but I cannot learn it for you"]]

   * Questions:
     - How did you study for this test?
     - If you didn't perform well, what will you change?
     - What can I do to help you help yourself?

   * CHANGES TO BE APPLIED BY BIRKENKRAHE (FUTURE QUIZ/TESTS):
     - Fewer choices for the multiple choice
     - Announce if a question has > 1 answer (and how many)

   #+caption: Feynman (via Twitter)
   #+attr_html: :width 500px
   [[./img/feynman.png]]

   * Post-mortem on a couple of questions
     - comment format (last question)
     - ~printf~ format
   #+name: noppeprogram
   #+begin_src C :main yes :includes stdio.h
     /*     one line
      ,*     multi line
      ,*/
     float f = 4.0f;
     printf("hello %.pf", f);
     /* one line
        or multi line
     ,*/
   #+end_src

   #+RESULTS: noppeprogram
   : hello 00000000f

** Test questions and answers

   * We go through all questions together
   * Everybody can contribute an answer
   * Write down questions and ask them now!

** This week (6)

   * Test review
   * Program assignment
   * Defining constants
   * Naming identifiers
   * Reading input

** Program assignment (until Monday 21-Feb, 11AM)

   *Compute the volume of a sphere*

   * Write a program that computes the volume of a sphere with a
     10-meter radius, using the formula $v=4/3\times\pi r^{3}$.
   * Write the fraction $4/3$ as ~4.0f/3.0f~. (Try writing it as 4/3
     and see what happens.)
   * Remember that C does not have an exponentiation operator, so you
     need to write $r^{3}$ as ~r*r*r~.
   * Upload your solution program as a ~.c~ file or as a ~.org~ file
     to Schoology not later than 11 AM on Monday, February 21st. Make
     sure that your program actually runs without errors!
   * Be prepared to present your solution in class.

* Formatting, C constants - w6s13 (02/16/22)
** Objectives

   * [X] Review: be the compiler / function challenge
   * [X] Understand different ways of defining C constants
   * [ ] Practice constant definitions
   * [ ] Understand naming conventions for C programs

** Warming up: be the compiler!

   The output of the program below should be:
   #+begin_example
     : The tax on 200.00 is 35.00, so the grandtotal is 235.00.
   #+end_example
   but instead the output is
   #+begin_example
     : The tax on -1093221452 is 0, so the grandtotal is 1080623104.
   #+end_example
   Can you fix the program [[tax]]?.

   #+name: tax
   #+begin_src C :results output :flags -Wall
     float subtotal;
     int tax;
     float grandtotal;
     float taxrate;

     taxrate = 0.175;
     subtotal = 200;
     tax = subtotal * taxrate;
     grandtotal = subtotal + tax;

     printf("The tax on %d is %d, so the grandtotal is %d\n",
            subtotal, tax, grandtotal);
   #+end_src

   #+RESULTS: tax
   : The tax on 0 is 1080623104, so the grandtotal is 34

** Programming challenge: hello world function

   * Things to remember:
     - You need to declare stuff before you can use it in C.
     - The function definition looks just like ~main~

   * Challenge: Write a function ~hello()~ that prints out ~hello
     world~ when called.

   * You can do this in Emacs in one code block, which contains the
     definition and the function call.

   * This challenge carries extra credit! Submit Org-file via
     email.

   * Solution next week! (This implies that you send it to me before
     the first class next week.)

* C constants, naming - w6s15 (02/18/22)
** News

   * Invitation for an online data science seminar with the data
     scientist of Stone Ward, Little Rock/Chicago, Matthew Ward: join
     us at 3 pm via Google Meet (see Schoology) - incl INTERNSHIPS

   * Great tips for getting better with Emacs quickly [[https://www.reddit.com/r/emacs/comments/splayn/how_to_start_learning_emacs_my_successful_method/][in this post]].
     See also my [[https://youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][Emacs for Beginners YouTube playlist]].
     #+begin_quote
     I started as a rank newbie 14 days ago, and I've learned enough
     to "get started", kind of grok emacs beginner fundamentals and
     simple navigation, and I feel VERY good about my progress. I
     wanted to share how I got to this point. (Note that I happened to
     have the time to read/watch/practice a few hours a day. If I only
     had 30 min per day, it would have taken me a month or two to get
     to this level.)
     #+end_quote

** Objectives

   * [X] Learn more ways of defining C constants
   * [X] Practice constant definitions
   * [X] Understand naming conventions for C program

** Warming up: be the compiler!

   * What's wrong with this program? (It won't even compile.)
     #+name: 021822_err
     #+begin_src C :results output
       #include <stdio.h>
       #define CONST_ 100;

       int main(void) {
         int value = CONST_, newValue;

         newValue = value + 1;

         printf("%d %d %d\n", CONST_, value, newValue);
         return 0;
       }
     #+end_src

     * Answer in the class notes file ~notes.org~.

** Next week

   * Quiz 4 (play me once, then play me often!)
   * Review of the volume/hello programming challenges
   * A new programming challenge!
   * Reading input with ~scanf~ (read me, baby!)
   * Good program layout
   * Arithmetic operators (math, yay!)

* Program assignment review, scanf - w7s16 (02/21/22)
** News

   * [[https://github.com/birkenkrahe/cc100/blob/main/3_basics/README.org][Script is always in GitHub]] (use it for your class post mortem)
   * [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][Literate Programming: Empower Your Writing with Emacs Org-Mode]]

** Objectives

   * [X] Review programming assignment "volume"
   * [X] Review programming challenge "hello world function"
   * [X] Understand reading input (from the command line)
   * [ ] Understand how in-class assignments work
   * [ ] New programming exercise "phone number conversion"
   * [ ] Complete two in-class assignments
   * [ ] See how reading input works in Emacs Org-mode

** Warming up: be the compiler!

   * The following program should print out ~3.0~ but it does not even
     compile! Find all mistakes, fix them and run the program in Emacs!

     #+name: 022122_err
     #+begin_example C
       float int1=1.f, int2=2.f, int;
       printf("%.2f\n"; int = int 1 + int 2);
     #+end_example

   * SOLUTION: see class notes.

** How do class assignments work?

   * In-class assignments are *10%* of your total grade
   * They are labeled *class assignments* in the Schoology gradebook
   * You get the points if you attend and participate *actively*
   * If you check your phone instead, you're *not* active
   * If you could not attend, submit *late*

** [[file:c:/Users/birkenkrahe/Documents/GitHub/Documents/GitHub/admin/spring22/cc100/org/assignments.org][Programming assignment review]]

   * I left detailed comments for most of you: use them or ask me! Use
     them by modifying your submission accordingly.

   * You can find examples and solutions in the class notes later.

   * Future submissions will be graded not just for effort but for
     accuracy (this includes following the instructions). However, you
     can (and should) always re-submit an improved version.

   * Computer science is a craft like any other: (1) you keep at it
     until you got it right, (2) you don't give up easily, and (3) you
     ask for help when you're at the end of your wits.

   * Please submit an Org-mode file if you have one so that I don't
     have to check your results line-by-line but can just run it.

   * Org-mode meta data were often not correct (file will still run)

     #+begin_example
     #+AUTHOR: name

     #+name: code
     #+begin_src C
     ...
     #+end_src
     #+end_example

   * A couple of programs looked awfully similar (down to errors):
     - There is no need to bend the rules: this is not a rat race!
     - If in doubt about "what is cheating", [[https://github.com/birkenkrahe/cc100/blob/main/syllabus.org#assignments-and-honor-codefn2][check the syllabus]].
     - Add ~#+HONOR: pledged~ to the top of your Org-mode submissions

   * You can find online REPLs (Read-Eval-Print-Loops) [[https://www.tutorialspoint.com/compile_c_online.php][like this one]]
     to try things out if you're flummoxed by Emacs Org-mode (at this
     point, you shouldn't be but Windows can be toxic...)

** Challenge review

   * User-defined functions are where programming really begins

   * See class notes for challenge solution

* Reading input with Emacs, tangling code - w7s17 (02/23/22)
** Objectives

   * [X] New programming exercise "phone number conversion"
   * [X] How to use ~scanf~ inside Emacs (and other input)
   * [X] Understand reading input (from the command line)

** How to use ~scanf~ inside Emacs with redirection

   * Emacs can fetch arguments via the header arguments ~:cmdline~ (as
     input redirected from a file), or via ~:var~ through assignment.
     #+name: cmdline
     #+begin_src C :cmdline < input :tangle practice/cmd.c
       float i,j;
       scanf("%f %f\n",&i, &j);
       printf("input was: %f %f\n",i,j);
     #+end_src

     #+RESULTS: cmdline
     : input was: 1.000000 2.000000

   * [X] If your neighbor does not get along, help him/her without
     being asked explicitly! (Well done everyone!)

   * [X] Create a file called ~input~ in the current working
     directory. It contains only the numbers ~1.~ and ~2.~:
     #+begin_example
       1. 2.
     #+end_example

   * [X] Create and run the code block [[cmdline]] in Emacs in a Org-mode
     file. Make sure that you have ~:main yes~ and ~:include
     <stdio.h>~ either on the code block header line or in the
     ~#+PROPERTY:~ meta data of your Emacs Org-mode file.

   * [X] Create and run the code block [[cmdline]] in Emacs. Make
     sure that you have ~:main yes~ and ~:include <stdio.h>~ either on
     the code block header line or in the ~#+PROPERTY:~ meta data of
     your Emacs Org-mode file.

   * [X] Tangle the code block and look at the file ~cmd.c~. To
     tangle, use the key sequence ~C-c C-v t~.

   * [X] Open a CMD terminal (or ~M-x shell~ inside Emacs), and
     compile the program ~cmd.c~. Call the executable ~cmd~.

   * [X] Run the program on the command line like this:
     #+begin_example
     cmd < input
     #+end_example

   * Shell "redirection" (directing the content of ~input~ into ~cmd~)
     is an important shell process. It uses both ~stdin~ and
     ~stdout~. [[https://www.gnu.org/software/bash/manual/html_node/Redirections.html][See GNU bash manual for details]].

** [[file:c:/Users/birkenkrahe/Documents/GitHub/Documents/GitHub/admin/spring22/cc100/org/assignments.org][Programming assignment]] (until +Monday, 28-Feb+ Tuesday, 1-Mar, 11 AM)

   * Write a program that prompts the user to enter a telephone number
     in the form ~(xxx) xxx-xxxx~, and then displays the number in the
     form ~xxx.xxx.xxxx~.

   * Example input/output of the first program, ~phone1.c~:
     #+begin_example
     Enter phone number [(xxx) xxx-xxxx]: (870) 456-7890
     You entered 870.456.7890
     #+end_example

   * Write another program that asks for the input format in the form
     ~xxx\xxx\xxxx~, and then displays the number in the form
     ~(xxx)xxx-xxx~.

   * Example input/output of the second program, ~phone2.c~:
     #+begin_example
     Enter phone number [xxx\xxx\xxxx]: 870\456\7890
     You entered (870) 456-7890
     #+end_example

   * Submit one Emacs Org-mode file ~phone.org~ with both programs in
     it as code blocks that can be *tangled* as ~phone1.c~ and
     ~phone2.c~, resp.

   * The header information of your Org-mode file should look like this:
     #+begin_example
       #+TITLE: Phone number conversion
       #+AUTHOR: [your name]
       #+HONOR: pledged
     #+end_example

   * Tip: some characters, like ~\~ are protected because they are
     part of the file ~PATH~. If you want to use them, you have to
     "escape" them with an extra ~\~, like the newline character
     ~\n~. So to print or to scan the character ~\~, you use ~\\~.
     #+name: escape
     #+begin_src C :results output
       printf("hi there\n");              // string output
       printf(" \"hi there\" \n");        // escaped \" will print
       printf("This is a slash: \ \n");   // slash will not print
       printf("This is a slash: \\ \n");  // escaped slash\\  will print
     #+end_src

     #+RESULTS: escape
     : hi there
     :  "hi there"
     : This is a slash:
     : This is a slash: \

* Lab session: scanf.org, reading input - w8s18 (02/28/22)
** Objectives

   * [X] Review: quiz questions 4 + 5 (complete them/ask)
   * [X] Be the compiler: ~scanf~ formatting
   * [ ] Review: compile and run C on the command line
   * [ ] Understand tangling code once and for all

** Be the compiler: ~scanf~ formatting

   * Download ~reading_input.zip~ from GitHub (cc100/practice)
   * The ZIP file contains an interactive notebook ~scanf.org~ and
     several prepared input files
   * Work through the notebook at your own pace
   * If you cannot finish in class, finish it at home!
   * Help thy neighbour and/or ask me for help!

** Compile and run C in the shell

   * [ ] Create a minimum C file, e.g. a hello world program ~hw.c~- either
     in Emacs or in any other editor you like:
     #+name: helloworld
     #+begin_src C :tangle practice/hw.c
       #include <stdio.h>

       int main() {
         puts("hello world");
       }
     #+end_src

   * [ ] Open a terminal (or ~M-x shell~ or ~M-x eshell~ in Emacs).

   * [ ] Convince yourself that the file can be found with ~DIR hw.c~

   * [ ] Compile the file with ~gcc -o hello hw.c~

   * [ ] The ~-o hello~ means "name the executable ~hello~"

   * [ ] Run the file by entering the name of the executable

   * [ ] As you can see via ~dir hello*~, the executable is actually
     called ~hello.exe~ in Windows.

   #+caption: Compile and run C program on the shell
   #+attr_html: :width 500px
   [[./img/compileandrun.png]]

** 2 Tips for the programming assignment

   1) (02/25/2022) If you want to test and run your file *inside*
      Emacs, which saves a lot of time, just add this to the header
      arguments (after the ~C~):
      #+begin_example
        :cmdline < input
      #+end_example
      where ~input~ is a file that contains the phone number as
      requested for input, ~(xxx) xxx-xxxx~ or ~xxx\xxx\xxxx~. Now
      ~C-c C-c~ will run and execute the program. Alternatively, you
      have to tangle the code block, compile and run it by hand on
      the command line.

   2) (02/27/2022) the formatting in ~scanf()~ needs to match the input
      pattern. E.g. if the input is given as
      #+begin_example
        foo==++//bar
      #+end_example
      (with ~foo~ and ~bar~ decleared as ~int~ variables) then only
      the following command will pick the input up properly:
      #+begin_example
        scanf("%d==++//%d", &foo, &bar);
      #+end_example
      irrespective of the output, which can be formatted in any way
      we like. ~scanf()~ only looks for two integers separated by all
      that junk between the numbers.

      Example: the file ~inputfile~ contains only: ~444==++//555~. We
      want to only print out ~444~ and ~555~.
      #+begin_src C :main yes :includes <stdio.h> :cmdline < practice/inputfile
        int a,b;
        scanf("%d==++//%d", &a, &b);
        printf("%d %d", a,  b);
      #+end_src

      #+RESULTS:

* Compiling, LitProg, Program Layout - w8s19 (03/04/22)
** News

   * [X] Mid-term grade speech / Improve grade with a project ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-improve-my-mid-term-grades][FAQ]])
   * [X] Program assignment *for extra credit*: [[https://github.com/birkenkrahe/cc100/blob/main/practice/dweight_new.pdf][~PDF~]] ([[https://github.com/birkenkrahe/cc100/tree/main/assignments/3_dweight][GitHub]])
   * [X] Practice material/notebooks now [[https://drive.google.com/drive/folders/12FZkGSRdzfxFd1-QEMxMkw0Q-Alz4F3U?usp=sharing][in GDrive]] (~reading_input~)
   * [X] PDFs of the quizzes with solutions [[https://github.com/birkenkrahe/cc100/tree/main/quizzes][now in GitHub]]

** Improve your grade with a project

   If you want to improve your grade, you can talk to me about doing
   a small, independent research project leading to a writeup in the
   form of a notebook, or a short (10-15 min) presentation. The topic
   must be related to the topic of this course.

** Objectives

   * [X] Understand how to compile and run C in the shell
   * [X] Understand literate programming once and for all
   * [X] Understand what good program layout means (practice)

** Compile and run C in the shell

   * Three shells[fn:3] are at your disposal: Microsoft shell (MacOS
     terminal), Emacs eshell, Emacs shell (= terminal) = CMD line:
     - Start Windows CMDline from the the Windows Search (~CMD~)
     - Start Emacs shell (Windows CMDline in Emacs): ~M-x shell~
     - Start Emacs eshell with ~M-x eshell~

   * Files you run in the terminal: Windows ~*.exe~ files - executable
     in binary format = machine code

   * [X] Create a minimum C file, e.g. a hello world program ~hw.c~-
     either in Emacs or in any other editor you like:

     #+name: helloworld
     #+begin_src C :tangle practice/hw.c :exports both
       #include <stdio.h>

       int main() {
         puts("hello world");
       }
     #+end_src

     You should see the output:
   #+begin_example
     #+RESULTS: helloworld
     : hello world
   #+end_example

   * [X] Tangle the code block above with ~C-c C-v t~ (if you have
     more than one code block in an Org file, use ~C-u C-c C-v t~)

   * [X] Open a terminal (or ~M-x shell~ or ~M-x eshell~ in Emacs).

   * [X] Convince yourself that the file can be found with ~DIR hw.c~

   * [X] Compile the file with ~gcc -o hello hw.c~

   * [X] The ~-o hello~ means "name the executable ~hello~"

   * [X] Run the file by entering the name of the executable

   * [X] As you can see via ~dir hello*~, the executable is actually
     called ~hello.exe~ in Windows.

   #+caption: Compile and run C program on the shell
   #+attr_html: :width 600px
   [[./img/compileandrun.png]]

   * [X] The general structure of the compile command ~gcc~ is
   #+begin_example
     gcc -o [outfile] [infile]
   #+end_example

** Understand tangling code once and for all
*** Concepts
    Concept review: make sure that you can answer these questions:[fn:4]

    | What is Emacs?                          |
    | What is Org-mode?                       |
    | What does "tangle" C code mean?         |
    | What does "weaving" documentation mean? |

*** Guided tour

    #+caption: Short explanation of literate programming
    #+attr_html: :width 600px
    [[./img/litprogshort.png]]

    #+caption: Detailed description of literate programming for C
    #+attr_html: :width 600px
    [[./img/litprog_cheat_sheet.png]]

    #+caption: Code block and comment in Org-mode
    #+attr_html: :width 600px
    [[./img/code.png]]

    #+caption: Tangled source code C file with comment
    #+attr_html: :width 600px
    [[./img/tangle.png]]

    #+caption: Documentation woven as HTML file in browser
    #+attr_html: :width 600px
    [[./img/weave.png]]

    #+caption: Executable C code block in Org-mode with results
    #+attr_html: :width 600px
    [[./img/orgmode.png]]

** Phone assignment solutions

   * See GitHub folder [[https://github.com/birkenkrahe/cc100/tree/main/assignments][assignments]]/

** Program layout

   * See GitHub folder [[https://github.com/birkenkrahe/cc100/blob/main/3_basics/README.org#program-layout][3_basics/]]

** Next

   * Solution to the ~layout.c~ challenge
   * More on ~scanf~ and ~printf~ formatting (DIY notebook)
   * Arithmetic expressions and operators (lecture)
   * Lab session (in-class assignment notebook)
   * Program assignment no. 6

* Printf conversion -  w9s20 (03/07/22)
** To do

   * [ ] Waking up in AppData/Roaming? [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-set-a-new-emacs-home-directory][Change your Emacs HOME now]].
   * [ ] Warming up: layout solution / NoppeLayout / NoppeLayoutModified
   * [ ] Getting more deeply into formatting I/O with printf and scanf

** Program Layout practice exercise

   * Don't be stingy with text when it comes to documenting your work
   * Documenting now will save you lots of time later
   * Make use of these examples for the next program assignment

     See program examples [[https://github.com/birkenkrahe/cc100/blob/main/practice/NoppeLayout.org][NoppeLayout]] and [[https://github.com/birkenkrahe/cc100/blob/main/practice/NoppeLayoutModified.org][NoppeLayoutModified]].

** Formatting I/O - printf

   * Interactive notebook to code along (GDrive) - ~io_printf_nb.org~

* Scanf conversion - w9s21 (03/09/22)
** Preparations for test 2 (Monday, 14-Mar)

   * Test 2 will only cover questions from quiz 4-6 + new questions.
   * You can find quiz 4-6 with solutions + feedback as PDF
   * I will create an update of content Org files ([[https://github.com/birkenkrahe/os420/tree/main/pdf][in pdf/]])

** Warming up: ~tprintf.c~

   * Remember conversion specifiers m.pX
   * New: a negative m left aligns a number: 123 as %-d => |123 |

   * [ ] Guess the output before running [[tprintf]]
     - how many spaces m are reserved?
     - how many decimal places after the point?
     - is the number left or right aligned?

     #+name: tprintf
     #+begin_src C :results output
       int i;
       float x;

       i = 40;
       x = 839.21f;

       printf("|%d|%5d|%-5d|%5.3d|\n", i, i, i, i);
       printf("|%10.3f|%10.3e|%-10g|\n", x, x, x);
     #+end_src

     #+RESULTS: tprintf
     : |40|   40|40   |  040|
     : |   839.210|8.392e+002|839.21    |

** Formatting I/O - scanf

   * Interactive notebook to code along ([[https://drive.google.com/drive/folders/12FZkGSRdzfxFd1-QEMxMkw0Q-Alz4F3U?usp=sharing][GDrive]]) - ~io_scanf.org~

   * Download the ZIP file and unpack it anywhere. All the files for
     the session are inside.

** Programming assignment 6:

   * Write a program ~div3~ that reads in three floating point
     numbers, adds the first two and divides the total by the third
     number. Test with these data:
     #+begin_example
     (1610 + 2004) / 2365
     #+end_example

   * Bonus program for extra credit points: change the program to
     ~div4~. This program should read in four floating point
     numbers. Add the first two together, then add the second two
     together. Divide your first sum by your second sum. Test with
     these data:
     #+begin_example
     (1610 + 2004) / (2005 + 360)
     #+end_example

   * Submit in Schoology as an Org file with your name and ~#+HONOR:
     pledged~ in the header. The code blocks should be run and the
     ~#+Result:~ should show the correct answer.

   * To get full points, submit the Org file with some comments
     outside of the code blocks - explaining what you do, what the
     code is about, or anything else really that you want to
     share[fn:5]. Use [[https://github.com/birkenkrahe/cc100/blob/main/practice/NoppeLayoutModified.org][NoppeLayoutModified.org]] as an inspiration.

   * A comment could look this is: I absolutely, and unreservedly LOVE
     this class!

   * This exercise originally came from Joyce (2018).

* Pgm 6, Operators, Pseudocode - w10s23 (03/16/22)
** Agenda

   * [X] Review: programming assignment 6 & Harry's HTML
   * [X] Outlook: C++ Basics (planned video series)
   * [X] C conditions - operators/pseudocode/flowcharts

** Harry's HTML

   * Fancy looking HTML

   #+caption: Harry's submission rendered from Org-mode as HTML file
   #+attr_html: :width 500px
   [[./img/htmlharry.png]]

   * Harry's code

   #+begin_src html
     ,#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style1.css" />
     ,#+HTML_HEAD_EXTRA: <link rel="alternate stylesheet" type="text/css" href="style2.css" />
     ,#+OPTIONS: html-style:nil
     ,#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
   #+end_src

** Conditions/Pseudocode

   See [[c:/Users/birkenkrahe/Documents/GitHub/cc100/4_conditions/README.org::README][README.org]] in [[https://github.com/birkenkrahe/cc100/tree/main/4_conditions][GitHub]]

* Character conversion, Flowcharts, BPMN, if structures - w10s24 (03/18/22)
** Warming up with pseudocode

   * Turn the following sentence into pseudocode:

     #+name: spring break
     #+begin_quote
     "On March 19, spring break starts."
     #+end_quote

   * To do this, you need a condition check

   * The condition check requires a variable and an operator

   * You do not necessarily need an alternative

   * Sample solution

     #+name: spring break pseudocode
     #+begin_example C
     if date == March 19
        start spring break
     #+end_example

** Flowcharts and IF statements

   See [[c:/Users/birkenkrahe/Documents/GitHub/cc100/4_conditions/README.org::README][README.org]] in [[https://github.com/birkenkrahe/cc100/tree/main/4_conditions][GitHub]]

** Program  assignment 7 - deadline Friday April 1

   [[https://lyon.schoology.com/assignment/5828898993/info][Link to assignment in Schoology]]

*** Problem

    * Modify the code from class ("Battle by numbers" [[https://github.com/birkenkrahe/cc100/tree/main/4_conditions#simple-if-structures][in GitHub]]) to
      use characters as menu choices instead of numbers.
    * To do this, you need to change from an integer data type to a
      character data type.
    * Both ~scanf~ functions and ~if~ structure have to be changed to
      accommodate this change.
    * The conversion specification for characters is ~%c~.
    * Note that character variables should be defined and used with
      single quotes, e.g. ~response = 'a'~ or ~response == 'a'~.

*** Character conversion

    * Create an input file with one character ~'a'~ in it.

      #+name: char input
      #+begin_src bash :results silent
        echo 'a' > input
      #+end_src

    * Declare a variable ~response~, scan the character from the input
      file ~input~, and print it.

      #+name: scan char
      #+begin_src C :cmdline < input :main yes :includes <stdio.h> :results output :exports both
        char response = '\0';
        scanf("%c", &response);
        printf("The character input was: %c\n", response);
      #+end_src

    #+begin_example
       The character input was: a
    #+end_example

    * To check the value of a ~character~ variable, use logical
      operators like ~==~. E.g. if ~char r = 'y'~, then ~r == 'y'~ is
      ~true~, and ~r != 'y'~ is ~false~.

*** Submission

    * Submit the code as a C source code file.
    * Make sure that the C code compiles and runs properly before
      submitting.
    * Late submissions will not be accepted for this assignment.
    * Extra credit (5 pts) for submitting a commented Org mode file
      (with the usual meta data in the header, and the results of a
      trial run).
    * Extra credit (5 pts) for submitting an Org mode file with a BPMN
      diagram of the algorithm included (send both files to me via
      email).

* Booleans, operator precedence - w11s25 (03/28/22)
** Term plan

   The plan for the rest of the term:

   * week 11 - ~switch~ and ~break~ statements
   * week 12 - iteration statements (~for~, ~while do~ loops)
   * week 13 - structured programming with functions
   * week 14 - grouping variables with arrays
   * week 15 - memory manipulation with pointers
   * week 16 - text manipulation with string functions
   * Includes some do-it-yourself reading (covered in weekly quiz 7-10)
   * Weekly programming assignments 8-12 (submit C or Org versions)
   * Final exam (TBC) on Monday May 9, 10:30-12:30 hrs in Lyon 104.

** Review and warming up: if statements

   * Though C has many operators, it has few statements: they fall in
     three categories, depending on how they affect the order in which
     statements are executed: selection, iteration and jump statements.

*** Selection statements

    * ~if~ and ~switch~ statements allow a program to select a
      particular execution path from a set of alternatives.

    * What is the output of this code?

      #+name: if1
      #+begin_src C :results output

        if (0) printf("1"); else printf("0");

      #+end_src

      #+RESULTS: if1
      : 0

      The following if statements have the same output:
      #+name: if2
      #+begin_src C :results output

        if (5 < 2) printf("1"); else printf("0\n");

        if (!(2 * 2) && 1) printf("1"); else printf("0\n");

        if (!'A') printf("1"); else printf("0\n");

      #+end_src

      #+RESULTS: if2
      : 0
      : 0
      : 0

    * Which alternative is chosen depends on the value of the
      expression in parentheses:

      | EXPRESSION    | BOOLEAN   | WHY                                |
      |---------------+-----------+------------------------------------|
      | 5 < 2         | FALSE (0) | 5 is smaller than 2                |
      | !(2 * 2) && 1 | FALSE (0) | !4 is 0                            |
      | !'A'          | FALSE (0) | A is converted to non-zero integer |

*** The "dangling else" problem

    * The following example illustrates the importance of braces: to
      which of the two statements does the ~else~ clause belong?

      #+name: dangling1
      #+begin_example C
        if (y != 0)
          if (x != 0)
            result = x / y;
          else
            printf("Error: y is equal to 0\n");
      #+end_example

    * If ~y~ is non-zero, the second if clause is entered, and if ~x~
      is also non-zero, the variable ~result~ is computed.

    * The rule in C is that an ~else~ clause belongs to the nearest
      ~if~ statement that has not already been paired with another
      ~else~. This is what Emacs does, too.

    * Alas: if y is non-zero and x is zero, we are told that y
      is 0. The print statement should be aligned with the first if,
      not with the second.

    * To make the clause part of the outer statement, use braces:

      #+name: dangling2
      #+begin_example C
        if (y != 0) {
          if (x != 0)
            result = x / y;
         } else
          printf("Error: y is equal to 0\n");
      #+end_example

*** Code template, pseudocode and BPMN model

    The key to "critical thinking" is to be able to look at a problem
    from different sides without prejudice and with perseverance.

    Remember: if all you have is a hammer, everything looks like nail.

**** Code template for if statements (=standard):

     #+name: template
     #+begin_quote C
     if ( expression )
     statement
     else
     statement
     #+end_quote

**** Pseudocode (=subjective) for if statements

     #+name: pseudocode
     #+begin_example
       if (true)
          do one thing
       else
          do another thing
     #+end_example

**** BPMN model

     #+attr_html: :width 550px
     #+caption: BPMN model of if else
     [[./img/ifelse.png]]

** Boolean algebra - do it yourself!

   The text for this section is on GitHub.

   * [ ] What algebra is really about
   * [ ] Truth tables
   * [ ] Compound logical expressions

** Operator precedence - do it yourself!

   * [ ] increment/decrement operators
   * [ ] order of precedence table
   * [ ] parenthesizing compound expressions

** In-class: compound if structures and input validation

   * [ ] && and || operators
   * [ ] Checking for lower- and upper case
   * [ ] Checking a range of numbers

   With practice notebook ~compound_if.org~ in GDrive.

* Compound if structures, input validation  - w11s26 (04/01/22)

  In this session, we mix lecture and interactive exercises for
  compound if structures (i.e. conditions with more than one logical
  condition and logical operators).

  * [ ] Download the updated practice file [[https://drive.google.com/drive/folders/12FZkGSRdzfxFd1-QEMxMkw0Q-Alz4F3U?usp=sharing][config_if.org from GDrive]]

* Switch, case, break, pgm 7, pgm 8 - w11s27 (04/01/22)
** Warming up: compound if conditions, i < j < k

   * [ ] Problem last time: I used the wrong operator!

     - To test if i in [m,n), use (m <= i && i < n)
     - To test if i is NOT in [m,n), use (i < m || n >= i)

     #+attr_html: :width 500px
     #+caption: whiteboard screenshot (corrected)
     [[./img/interval.jpg]]

   * [ ] Warming up exercise: how would you test if

     1) j=1 is in the interval (-5,5]
        (-5 < j && j <= 5): j=1 => TRUE (1)
     2) k=100 is NOT in the interval (1,100)
        (k <= 1 ||  100 <= k)
     3) l=2 is NOT in the interval [0.5,0.9]
     4) what data type does l have to be?

   * Let's check your answers!

     #+name: intervalCheck
     #+begin_src C :results output :exports both
       int j=1;
       int k=100;
       float l=0.1;

       if ( -5 < j && j <= 5 ) printf("%d is in (5,-5]\n", j);
       if ( k <= 1 || k >= 100 ) printf("%d is NOT in (1,100)\n",k);
       if ( l < 0.5 || l > 0.9 ) printf("%g is NOT in [0.5,0.9]\n",l);

     #+end_src

     #+RESULTS: intervalCheck
     : 1 is in (5,-5]
     : 100 is NOT in (1,100)
     : 0.1 is NOT in [0.5,0.9]

   * Tricky: i < j < k (see practice file)

** Programming assignment 7 (review, deadline 01-Apr)

   Here is the template, the code in [[ibattle]] for number input from
   the file created in [[ibattleinput]] first, then the solution for
   character input in [[cbattle]], including the bonus solution (inline
   image of the BPMN model for the algorithm).

*** Battle by numbers

    The code in [[ibattle]] below reads input from a file [[idrink]] (the file
    contains the number ~1~, one of the two possible responses to
    the battle question). You can change the input to ~2~ to get
    the other response.

    #+name: ibattleinput
    #+begin_src bash :results silent
      echo "1" > idrink
    #+end_src

    #+name: ibattle
    #+begin_src C :tangle ibattle.c :main yes :includes <stdio.h> :cmdline < idrink :results output
      int response = 0; // initialize response

      puts("\n\tIn-Battle Healing\n\n1:\tDrink health potion\n\n2:\tResume battle\n");

      printf("\nEnter your selection: ");
      scanf("%d", &response);

      if (response == 1)
        printf("\nYou entered \"%d\":\nDrinking health potion!\n", response);

      if (response == 2)
        printf("\nYou entered \"%d\":\nResuming battle!\n", response);
    #+end_src

    #+RESULTS: ibattle
    #+begin_example

            In-Battle Healing

    1: Drink health potion

    2: Resume battle


    Enter your selection:
    You entered "1":
    Drinking health potion!
    #+end_example

*** Battle with character

    The code in [[cbattle]] below reads input from a file [[cdrink]] (the
    file contains the character ~a~, one of the two possible
    responses to the battle question). You can change the input to
    ~b~ to get the other response.

    #+name: cbattleinput
    #+begin_src bash :results silent
      echo "b" > cdrink
    #+end_src

    #+name: cbattle
    #+begin_src C :tangle cbattle.c :main yes :includes <stdio.h> :cmdline < cdrink :results output
      char cresponse = '\0'; // initialize response

      puts("\n\tIn-Battle Healing\n\na:\tDrink health potion\n\nb:\tResume battle\n");

      printf("\nEnter your selection: ");
      scanf("%c", &cresponse);

      if (cresponse == 'a')
        printf("\nYou entered \"%c\":\nDrinking health potion!\n", cresponse);

      if (cresponse == 'b')
        printf("\nYou entered \"%c\":\nResuming battle!\n", cresponse);
    #+end_src

    #+RESULTS: cbattle
    #+begin_example

            In-Battle Healing

    a: Drink health potion

    b: Resume battle


    Enter your selection:
    You entered "b":
    Resuming battle!
    #+end_example

** Programming assignment 8 (deadline 08-Apr)
*** Problem

    * Using the ~switch~ statement or cascaded ~if~ statements, write a
      program that converts a numerical grade into a letter grade.

    * Example run:

      #+name: n2l_example
      #+begin_example
        Enter numerical grade: 84
        Letter grade: B
      #+end_example

    * Use the following grading scale:

      | Numerical grade | Letter grade |
      |-----------------+--------------|
      |          90-100 | A            |
      |           80-89 | B            |
      |           70-79 | C            |
      |           60-69 | D            |
      |            0-59 | F            |

    * Print an error message if the grade is larger than 100 or less
      than 0.

    * /Hint:/ You can break the grade into two digits, then use a
      ~switch~ statement to test the ten's digit.

*** Tip: how to analyse a programming problem

    * A programming solution requires identifying
      - problem (given in the text - is it clear?)
      - constants (which values do not change?)
      - variables (which values do change?)
      - statements (what needs computing?)

    * For any but trivial problems, spending time on gathering and
      structuring this information before beginning to code will save
      you lots of debugging time

* Iteration: while and do loops - w12s28-30 (04/06-08/22)

  * [X] ~while~ , ~do~ and ~for~ statements

  * [ ] Exiting loops with ~continue~, ~goto~, and ~Null~

  * [X] Practice workbooks in GDrive

  * [X] Add ~(setq-default org-hide-emphasis-markers t)~ to ~.emacs~

  * [X] Review program assignment 7 (~if~ and ~switch~)

  * [X] New program assignment 8

** Emacs tip: hide emphatic characters

   To *not* see the emphatic characters like ~ or * or / in the Org file
   text, run the following code chunk (or put the code in your ~/.emacs~
   file): if successful, you should see ~"t"~ in the minibuffer.

   #+begin_src emacs-lisp :results silent
     (setq-default org-hide-emphasis-markers t)
   #+end_src

   If you don't put it in your ~/.emacs~ file, the command will only work
   for the current Emacs session.

** Emacs tip: change theme to "Leuven"

   * In Emacs, open the theme selector with ~M-x custom-themes~
   * Select ~Leuven~ and click on ~Save theme settings~
   * Your code blocks are now more clearly visible
* Review pgm 8, ~for~ practice, exiting loops - w13s31 (04/11/22)

  * [X] Last quiz no. 9 - review on Apr-25, Test 3 on Apr-27 to Apr-28
    (24 hrs) - unless I find time to make a last (ungraded) quiz...

  * [X] The final exam on May 9 will contain 10 new questions from the
    topics of the next few weeks (but we will discuss them in class)

  * [X] Review of [[https://github.com/birkenkrahe/cc100/tree/main/assignments/8_grades][programming assignment 8 (grades)]]

  * [X] Review of ~for~ statement [[https://github.com/birkenkrahe/cc100/blob/main/practice/loops/for.org][practice assignment]]

  * [X] Exiting loops with ~break~, ~continue~, ~goto~

* One-dimensional arrays - w13s32 (04/13/22)

  * [ ] Book recommendation for the holidays! [[https://www.amazon.com/How-Solve-Mathematical-Penguin-Science/dp/0140124993/]["How to solve it"]] by
    George Pólya (1990 - see also [[https://www.wtamu.edu/academic/anns/mps/math/mathlab/int_algebra/int_alg_tut8_probsol.htm][application example]]).

    #+attr_html: :width 200px
    #+caption: Perennial classic: Pólya's HOW TO SOLVE IT
    [[./img/polya.jpg]]

  * [ ] Change of plan: there will be *2 more quizzes* before the final
    exam, and one more before the Test 3, but no new questions on
    either Test 3 or final exam, so you can use all tests to prepare
    100%.

  * [ ] As promised there will be some [optional] *C++ training
    material* available after the end of term: it will consist of a
    series of notebooks introducing the C++ equivalents of the topics
    that we covered in this course.

  * [ ] If you are going to take *data structures* (CSC 240) next, you
    should probably take a stab at this material. You can (and
    should!) contact me at any time if you have ouble with it.

  * [ ] Today: "arrays" script in GitHub and Emacs workbook in GDrive.

* Multidimensional arrays, sizeof - w14s33
** Housekeeping

   * [ ] Play *[[https://lyon.schoology.com/course/5516220826/materials#!filter_type=assessments][quiz 7-9]]*- review next week
   * [ ] *Test 3* will be online only Thu 28-Apr 4pm to Fri 29-Apr 4pm
   * [ ] Final exam will cover all quizzes, all tests only
   * [ ] C++ overview planned for the last week (not in final exam)

** Warming up with 1-dim arrays

   * [ ] An array can be initialized with a single value. Complete the
     statements to print out the first and the last element of an
     array of 5 elements.

     #+begin_src C
       int iArray[?] = {0};
       printf("first: %d, last: %d", iArray[?], iArray[?]);
     #+end_src

   * [ ] You can also initialize an array with a ~for~ loop. Find all
     mistakes in the following code block.

     #+begin_src C
       int i;
       int iArray[5];

       for (int i == 0; i <= 5; i++ ) {
         iArray[i] == 0;
     #+end_src

   * Solution:

     #+begin_src C
       int iArray[5];

       for (int i = 0; i < 5; i++ ) {
         iArray[i] = 0;
         printf("%d %d\n",i, iArray[i]);
        }
     #+end_src

* References
  * For some of the programming projects, see: King (2011). C
    Programming. W Norton & Co.
  * Joyce (2018). Numerics in C. Springer Apress.
* Footnotes

[fn:5]It's a notebook, so you could for example write a paragraph
reflecting on how easy or difficult you found this. Or you could add
code blocks that didn't work and comment on why not.

[fn:3]In other Operating Systems but Windows, there is a fourth shell,
the terminal (~M-x terminal~), and in Windows, you also have
PowerShell. All of these are ways of interacting with the OS.

[fn:4]GNU Emacs is an extensible text editor. Org-mode is a plain text
environment in GNU Emacs for keeping notes, authoring documents,
computational notebooks, and more. Tangling code means extracting
(human readable) source code from an Org-mode file in order to run
it. Weaving documentation means extracting a document from an Org-mode
file in order to read it.

[fn:2]I managed to install GCC on the lab computers and run it inside
GNU Emacs. This is something that you should do at home with your own
computer. I'm going to demonstrate the process in class and I will
also make a short video showing how to do it (for Windows 10).

[fn:1]This requires system admin privileges, which you only have on
your own PC. In the computer lab, I have such principles, and as soon
as I managed to install our tools, you can also use them on the lab
equipment.
