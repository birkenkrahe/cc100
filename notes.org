#+TITLE:CC Class Notes
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Followup class notes for CSC100 Intro to Programming in C/C++ Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: ^:nil
#+PROPERTY: header-args:C :main yes :includes <stdio.h> :exports both :comments both
* README

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the homework
  (if any). The first point of call for any questions should be the
  FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my courses), and a
  [[https://github.com/birkenkrahe/cc100/blob/main/FAQ.org][FAQ for CSC 100]].

  You find the whiteboard photos [[https://drive.google.com/drive/folders/177ILNWKMQo2I_KlvXA97rZmVJsqh0jYp?usp=sharing][here in GDrive]].

  The companion file to this file, with the agenda and much of the
  course content, is the [[./agenda.org][agenda.org]] file.

  Please note that all inline references like (King, 2011) are linked
  within the file but will not render in GitHub (i.e. you'll end up on
  a 404 page). You find all inline references completed at the end of
  the file.

* Welcome to the course - w1s1 (01/12/22)
** Homework (until Friday, 14 Jan)

   (See [[https://lyon.schoology.com/assignment/5555682785][Schoology assignment]])

   * [[https://github.com][Create a GitHub account]]
   * [[https://docs.github.com/en/get-started/quickstart/hello-world][Complete the GitHub Hello World exercise]]
   * [[https://github.com/birkenkrahe/cc100/issues][Submit an issue to the ~cc100~ GitHub repo to confirm completion.]]

   Let me know if you encounter any problems. This shouldn't take more
   than 20 minutes of your time. Bring any questions that you may have
   with you to class!

   If you are in another one of my courses, you don't have to do the
   exercise again, but you should submit an issue for every course that
   you attend. When I receive the issue, I will close it and give you
   the points!

   Purpose of this exercise:
   * Engage with the GitHub software development platform
   * Understand how to submit issues (aka corrections, suggestions etc.)
   * Understand how software developers work in the cloud using the Git
     version control software

** Stuff

*** Finding your operating system

    Victor: On Windows, search for ~dxdiag~ ("DirectX Diagnostic
    Tool"). This is actually quite a large hammer for a small nail. On
    any computer, you should be able to enter ~About~ in the search
    field and get at least some information about your operating
    system (OS).

    The operating system is software on your computer that enables it
    to run other programs. You may imagine it as a system of roads to
    get you where you want to go.

*** Books

    I showed a few books that explain different aspects of C - because
    so many devices contain C! All of these are interesting, none are
    necessary (or even recommended) for beginners, and all are brand
    new - demonstrating the continued interest in C.

    #+attr_html: :width 200px
    #+caption: Numerical C by Philip Joyce (Apress, 2019)
    [[./img/joyce.png]]

    #+attr_html: :width 200px
    #+caption: Effective C by Robert C Seacord (NoStarch, 2020)
    [[./img/seacord.png]]

    #+attr_html: :width 200px
    #+caption: Modern C by Jens Gustedt (Manning, 2020)
    [[./img/gustedt.jpg]]

    #+attr_html: :width 200px
    #+caption: Raspberry Pi IoT in C by Henry Fairhead (I/O Press, 2016)
    [[./img/fairhead.jpg]]

*** Wrapper

    This term refers to the fact that not all software runs on all
    operating systems (OS). One way of running "alien" software on
    your OS is to "wrap" it - same thing that a (bacterial) vaccine
    does: your OS then thinks it deals with something it knows.

    My examples (for Windows only) were:
    1) "cygwin", which is a bundle of Linux services, wrapped up to
       run under Windows. Cool app, actually. [[https://cygwin.com/install.html][See here for the easy
       download and installation]] (just download and run the file
       ~setup-x86_64.exe~. It's one quick way of getting a C
       compiler - a program that can translate your C programs so that
       they run on your computer.
    2) "ubuntu linux app" - This is a wrapper for a complete Linux
       system for Windows. [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-install-linux-under-windows-10][See this FAQ]] for how to install it on your
       computer (worth doing). It's another way to get a C compiler.

*** [[https://en.wikipedia.org/wiki/Library_(computing)][(Software) library of functions]]

    #+attr_html: :width 500px
    #+caption: Library (Source: Unsplash)
    [[./img/library.jpg]]

*** Command-line interface

    Aka CLI, terminal, command line, or shell. Linux nerds and hackers
    thrive on the command line, and so will you, via this course.

    Some live "[[https://www.linuxjournal.com/content/without-gui-how-live-entirely-terminal][entirely in a terminal]]" ([[lunduke][Lunduke, 2019]]).

    #+attr_html: :width 500px
    #+caption: the other kind of shell (Source: Unsplash)
    [[./img/shell.jpg]]

*** Literate programming = doc + code + output

    There isn't that much more to it. We'll use GNU Emacs Org-mode as
    interactive notebook environment, and also to develop, run and
    debug C code.

    You can find more information about literate programming, and
    plenty of links [[https://en.wikipedia.org/wiki/Literate_programming][at Wikipedia]].

    I have just made a screencast to show the difference between shell
    and notebooks, not using C but the database query language SQLite
    instead ([[birkenkrahe][Birkenkrahe, 2022]]). [[https://youtu.be/8HJGz3IYoHI][Check it out]].

* Git, GitHub, History of C - w1s2 (01/14/22)

  * TIOBE = "[[https://en.wikipedia.org/wiki/The_Importance_of_Being_Earnest][The Importance of Being Earnest]]" - play by Oscar Wilde
    (1895).
  * Weekly quiz: review of last week's content. After the first play,
    the quiz will be opened for unlimited playing and can be used to
    prepare for the final exam (whose questions are sourced from the
    quiz).
  * Algorithms vs heuristics - heuristics is a human behavioral domain
    and leads to more resilient processes.
  * The "[[https://en.wikipedia.org/wiki/Kernel_(operating_system)][kernel]]" is the core of an operating system. E.g. the Linux kernel.
  * COBOL is a compiled language used mainly in finance and business
    since the late 1950s. It mainly runs on mainframes (very large
    computers). To be able to understand, and fix COBOL programs has
    become a rare skill since the language is rarely taught. [[https://www.mainframestechhelp.com/tutorials/cobol/][Here is a
    free tutorial]].

* Introduction to C and C++ - w2s3 (01/19/22)

** Quiz feedback discussion

   * Timing - 15 OK
   * Content - no questions
   * Schedule - weekly quiz as a recap of last week
   * Grading - unlimited attempts after the first play (in class)

** Captain's Log

   * If you miss a class and would like it recorded, notify me
     beforehand. I will do my best to create a recording, which will
     then be uploaded to GDrive ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F12abr-xo1Kbd5F-0zLRq_2KYbsCULHidL%3Fusp%3Dsharing][link in Schoology]])

   * Whiteboard screenshots taken after class will be uploaded in
     GDrive as well ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F177ILNWKMQo2I_KlvXA97rZmVJsqh0jYp%3Fusp%3Dsharing][link in Schoology]]). You can submit GitHub issues
     if you have questions, additions, etc

   * If you miss a class, check content planned/covered through the
     files ~agenda.org~ and ~notes.org~ [[https://github.com/birkenkrahe/cc100][in the GitHub repo]].

   * You can add your GitHub skills to your resume and it might help
     you when you try to get a job or an internship!

   * This class will be offered in the Summer I program (June
     2022). Same content and format, and likely better than this first
     version (because I'll have learnt how to do it better).

   * My challenge: why should a liberal arts major (e.g. political
     science) learn to program, and especially in C?
     - "Meet The Newest Liberal Art: Coding" ([[koenig][Koenig, 2020]])
     - Greater employability is a general, traditional reason
     - Coding can be fun. Kids know this.
     - Data and computer literacy is a life and a professional
       skill. Especially for political science/economics, see the
       Economist newletter "[[https://view.e.economist.com/?qs=656e8edd261819ad127632bd9fc89d2693ab5b810851ce4bd3c9b136783bf9a66449c77fa31064988ea46b682a0e8efeb56fca106d505a3dcf51d920dc5bcf1b6f2e2e72407034bde705c7cfc6af5ec4][Off the charts]]" ([[segger][Segger, 2022]]).

       #+caption: Plots from The Economist
       #+attr_html: :width 500px
       [[./img/graph.jpg]]

   * [[https://en.wikipedia.org/wiki/Object-oriented_programming][Object-Oriented Programming (OOP)]] is a specialty of C++ over
     C. Other modern languages share this paradigm (which is
     conceptually quite difficult): Java, Python, R, are examples. OOP
     is useful in the world especially for *reuse* of code, and it
     makes maintaining large code repositories easier. Our
     introduction to C++ at the end of the introductory class will
     include a short tour of OOP, too.

   * Glossaries are like dictionaries of important words. Knowing
     words and definitions can help you learn new things much more
     quickly and easily. I know whereof I speak - at this stage of my
     life, I learn new things really quickly because I have such a
     large - not necessarily deep - foundation of technical terms (and
     thereby, concepts). Don't neglect your learning of (new) words!

* Install C compiler, set PATH - w2s4 (01/21/22)

  #+caption: GCC logo
  #+attr_html: :width 200px
  [[./img/gcc.png]]

  * Installed GCC, the compiler. For instructions, [[https://github.com/birkenkrahe/org/blob/master/emacs/install.org][see here]].
  * After the installation, you have to set the ~PATH~ to the compiler
    so that it can be found.
  * You can test the successful installation in the terminal (Windows
    CMD prompt) with the command ~gcc --version~.
  * The documentation to this important, large (with > 10 mio lines of
    source code) software program is massive ([[https://gcc.gnu.org/onlinedocs/gcc.pdf][PDF]] - [[stallman][Stallman 2022]]),
    though there are also shorter introductions, if you're interested,
    [[https://tfetimes.com/wp-content/uploads/2015/09/An_Introduction_to_GCC-Brian_Gough.pdf][like this one]] ([[gough][Gough, 2014]]).

* Install GNU Emacs - w3s5 (01/24/22)

  What you learnt using the instructions from [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][tutor.org]]:
  - Open, shut or suspend Emacs
  - Open the Emacs tutorial
  - Read a file into Emacs

    These are the skills you need to complete the [[https://lyon.schoology.com/assignment/5598737597][assignment]] (for
    extra credit until Wednesday 11 AM - for all others we'll do this
    in class).

    Here is the Emacs documentation on the initialization file
    ~.emacs~ in the GNU Emacs manual: "[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html][How Emacs finds your init
    file]]".

* Create GNU Emacs Org-mode file - w3s6 (01/26/22)

  * Fixed the ~.emacs~ problem - this file must be located in the
    directory that you find in Emacs with ~~/~. (See [[https://lyon.schoology.com/assignment/5598737597/info][instruction]].)

  * Started the [[https://github.com/birkenkrahe/cc100/tree/main/assignments/org-mode][Org-mode exercise]]. Will finish it on Friday. Then you
    can run C code inside Emacs as an Integrated Development
    Environment (IDE).

* GNU Emacs initialization file - w3s7 (01/28/22)

  * Explanation of the Org-mode C code block header arguments:

    | HEADER ARGUMENT     | MEANING                                                |
    |---------------------+--------------------------------------------------------|
    | ~:main yes~         | wrap ~puts~ statement in ~int main(void) { }~ function |
    | ~:includes stdio.h~ | include standard input/output header file              |
    | ~:tangle first.c~   | export source code as C file ~first.c~  ("tangle")     |
    | ~:exports both~     | both result and source code will be exported           |
    | ~:comments both~    | link source code and org files, add comments to source |
    | ~:results raw~      | insert output directly in org format into org file     |

  * Something you may have noticed in the GitHub issue submissions of
    your resulting Org-mode file: the tilde (~) around a word strikes
    it through on GitHub. On GitHub, `...` is the syntax for code (in
    HTML, this is <code> ... </code>.

    #+caption: screenshot from a GitHub Org-mode file submission
    #+attr_html: :width 400px
    [[./img/issue1.png]]

  * Feel free to bring your own laptop to future sessions. If you want
    me to check installation because something did not work, come a
    little earlier or stay a little later.

  * This concludes our "Emacs week". To get more practice in GNU
    Emacs, complete the onboard tutorial (~C-h t~).

  * Solutions to the Org-mode assignment are posted [[https://github.com/birkenkrahe/cc100/tree/main/assignments/org-mode/solutions][here on
    GitHub]]. Note that submissions of programs as Org-mode files should
    always also be accompanied by references and sources.

  * I told you an inaccuracy in class: when rendering the Org-mode
    file on GitHub, the ~#+TITLE~ meta information is displayed as the
    title of the file. If no such header is present, only the ~README~
    file is displayed (with the file name as title).

* GCC lab session -  w4s8 (01/31/22)

  Lab session - see whiteboards.

* Structure of a C program - w4s9 (02/02/22)
** Compiler flags

   * Compilers come with a lot of options (check ~gcc --help~)
   * For the assignment, add ~:flags -Wall~ to the header (~gcc~
     option)[fn:1]

** The ~pun.c~ program

   Check the [[glossary]] for details. The output, by the way, does not
   look good on GitHub.

   #+name: pun
   #+begin_src C :main yes :include stdio.h :results raw
     printf("To C, or not to C, that is the question.\n");
   #+end_src

   #+RESULTS: pun
   To C, or not to C, that is the question.

   #+name: pun1
   #+begin_src C :results raw
     #include <stdio.h>

     int main(void)
     {
       printf("To C, or not to C, that is the question.\n");
       return 0;
     }
   #+end_src

   #+RESULTS: pun1
   To C, or not to C, that is the question.

   #+name: newline
   #+begin_src C :main yes :include stdio.h :results raw
     printf("To C, or not to C,\n that is the question.\n");
   #+end_src

   #+RESULTS: newline
   To C, or not to C,
   that is the question.


   #+name: smiley
   #+begin_src C :main yes :include stdio.h :results raw
     printf("O         O\n");
     printf("     | \n");
     printf("\n");
     printf(" *       * \n");
     printf("   * * * \n");
   #+end_src

   #+RESULTS: smiley
   O         O
   |

   *       *
     * * *


** Comments

   #+name: comments
   #+begin_src C :main yes :include stdio.h :results raw :exports both
     /* Comment on a line */
     // Another type of comment on a line
     printf("Nothing to see here.\n");  // on a statement line

     /* You can also comment
        over several lines */
   #+end_src

** Glossary
   <<glossary>>

   | TERM               | EXPLANATION                                        |
   |--------------------+----------------------------------------------------|
   | C program          | Directive + ~main~ function + statements           |
   | Directive          | Pre-processor, e.g. ~#include~ + header            |
   | Header             | Standard library functions, e.g. ~stdio.h~         |
   | Function           | Named series of statements for execution           |
   | Library function   | Pre-defined C function, e.g. for input/output      |
   | Return value       | Returned value computed by a function              |
   | ~main~ function    | Mandatory wrapper function, called automatically   |
   | Status code        | Indicates program termination status, e.g. ~0~     |
   | String literal     | List of characters in quotes, e.g. ~"Hello world"~ |
   | End symbol         | Statements must have it at the end, in C: ~;~      |
   | New-line character | ~\n~ moves the display by one line                 |

* Variables and assignments - w5s10 (02/07/22)

  * Difference between the output functions ~puts~ ("put string") and
    ~printf~ ("print file"): ~puts~ automatically adds a newline
    character (~\n~) at the end of the string - for ~printf~, you have
    to add the character, if you want to move to the next line.

  * Purpose of the Org-mode header arguments? Emacs automatically
    inserts
    - ~main~ function (~:main yes~)
    - Standard library files as directives (~#inlude <stdio.h>~)
    - Compiler flags (~-Wall~ for all warnings)

  * Why do types have to be declared? So that the computer can manage
    its memory better - volatile memory (RAM) is expensive and small
    (compared to non-volatile memory, like a hard disk)

* C constants, naming conventions - w6s13 (02/16/22)

  * "Warming Up: be the compiler!" - The solution to fix the output
    was to change the format specifiers for the floating point
    variables from ~%d~ to ~%f~, and to change the type declaration
    for ~tax~ from ~int~ to ~float~ (since it's coerced into a ~float~
    through the computing statement.
  * The follow-up question was: how can we get rid of the 6 default
    digits and print only two digits. The answer: use ~%.2f~ with
    precision ~p=2~.

  * Computers are unforgiving when it comes to neglect. It's like
    talking to someone who doesn't understand you at all if you
    cannot spell perfectly.

  * When a program does not run, use classic compsci heuristics:
    1) Try to understand the error message from Emacs or gcc.
    2) If the compiler gcc complains: check the syntax - Emacs helps
       you with Syntax highlighting (you might want to change the
       Emacs theme for that with ~M-x custom-themes~).
    3) Close the program and reopen it
    4) Close Emacs and reopen it
    5) Shut down the computer and restart it

* Test review - w6s12 (02/14/22)
*** Known quiz questions
    * WHERE DOES C COME FROM

      UNIX
    * WHICH OF THE FOLLOWING ARE STRENGTHS OF THE C PROGRAMMING LANGUAGE?

      * Portability - runs on any computer
      * Speed and efficiency - clever compilers
      * Standard library - like ~stdio.h~ for input/output
    * WHAT DO YOU NEED TO CREATE AND RUN A C PROGRAM?
      | WHAT                                          | WHY                                                                                                                                    |
      |-----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------|
      | An editor (like Emacs)                        | To write the source code (.c)                                                                                                          |
      | An operating system (like Windows)            | To run the edior, the compiler, and display (or print) the results                                                                     |
      | A compiler + linker (like GCC)                | To compile the source code to object code, and link it to libraries (e.g. stdio.h for input/output) to produce executable machine code |
      | A hosting platform (like GitHub)              | Cloud application - nice to have if you collaborate at a distance, not needed                                                          |
      | A learning management system (like Schoology) | Only if you want to learn and teach, not for programming                                                                               |
    * C IS AN OBJECT-ORIENTED PROGRAMMING LANGUAGE

      * NO
      * C++, C#, Java, R, Python etc. are OOP languages
      * C has no notion of a class that allows to define subclasses,
        inheriting functions/methods etc.
    * KNOW YOUR CODE - MATCH THE TERM AND THE DEFINITION!
      | QUESTION     | ANSWER                      | EXAMPLE                                     |
      | Source code  | Human-readable program      | e.g. a program ~hello.c~                    |
      | Machine code | Program ready for execution | after compiling and linking                 |
      | Object code  | Code produced by a compiler | only ~main()~, but unable to produce output |
    * WHAT IS GCC? TIP: WE INSTALLED GCC ON WINDOWS AS MINGW.

      * A bundle of compilers for many different languages
      * Includes ~gcc~ that we use on Windows, Linux and MacOS[fn:2]
    * MATCH THE EMACS ORG-MODE HEADER ARGUMENT AND THE MEANING
      - Emacs Org-mode is an application inside Emacs that allows you
        to run C programs without having to explicitly invoke GCC
      - To make the magic happen, Org-mode parses the header arguments
        and substitutes them in the code that GCC gets from Emacs
      - When you tangle a file, you can see the result of this
        substitution, and the tangled file can be compiled and run on
        the command line
      | HEADER-ARGS:C       | MEANING                                                |
      |---------------------+--------------------------------------------------------|
      | ~:main yes~         | wrap ~puts~ statement in ~int main(void) { }~ function |
      | ~:includes stdio.h~ | include standard input/output header file              |
      | ~:tangle first.c~   | export source code as C file ~first.c~  ("tangle")     |
      | ~:exports both~     | both result and source code will be exported           |
      | ~:comments both~    | link source code and org files, add comments to source |
      | ~:results raw~      | insert output directly in org format into org file     |
      #+begin_example
      #+name: C example
      #+begin_src [language] [header-args]
        [statements]
      #+end_src
      #+end_example
*** MATCH PROGRAM ELEMENT AND DEFINITION!

    - The directive has to be at the top of the program
    - The ~main~ function has to be there (there can be other
      functions, but it has to run first)
    - The statement is not necessary but it's what is executed

    | C SOURCE CODE            | MEANING                                |
    |--------------------------+----------------------------------------|
    | ~#include <stdio.h>~     | Directive (input/output library)       |
    | ~int main(void) { ... }~ | Main function (without input argument) |
    | ~printf("hello\n");~     | Program statement (screen display)     |

    - Here is a function definition outside of ~main()~ that does the
      same job as our hello world program - print out ~hello
      world~. To demonstrate the relationship between our own function
      ~hello()~ and ~main()~, I am not using any ~header-args~ in the
      block [[hello function]].
      #+name: hello function
      #+begin_src C :tangle hellof.c
        #include <stdio.h>
        hello() {
          printf("hello function world\n");
        }
        int main(void){
          hello();
          return 0;
        }
      #+end_src

      #+RESULTS: hello function
      : hello function world

    * Which of these are NOT valid PATH settings?
    * The "binary" of a program (like gcc) is machine code that runs
      on any type of computer.
    * Which symbols mark Org-mode metadata?
      - #+
      - /* */
      - //

*** WHICH OF THESE ARE VALID TYPE DECLARATIONS?

    Tip: once a type is declared, it can be used in a program
    statement to be assigned values.

    TRUE:
    * ~int height;~
    * ~float profit;~

    FALSE:
    * ~int profit~
    * ~height = 8;~

*** The name ~main~ in a C program is critical - it can't be ~MAIN~ or ~start~

    TRUE

    Feedback: Computers, and their languages, are very picky. That's
    why computer languages are called "formal" rather than
    "natural". Violation of the rules means (usually) instant program
    failure. The spelling of keywords in C like ~main~ (or ~int~, or
    ~printf~) or the demand for a semicolon after each statement, are
    examples.

*** Which of these terminal commands will compile the file ~hello.c~ and create an executable file named ~hello~

    TRUE:
    * ~gcc -o hello hello.c~

    FALSE:
    * ~gcc hello.c~
    * ~compile hello.c -out hello~
    * ~gcc -o hello.c hello~

*** How can you tell the compiler to warn you if something's not quite right with your source code?

    TRUE:
    * gcc -Wall

    FALSE:
    * gcc --help
    * gcc --version
    * gcc --target-help

*** ~:includes~ is for Org-mode, ~#include~ is for the C compiler preprocessor

    TRUE

    Feedback: :includes and #include both are followed by the library
    or libraries (usually more than one) that you wish to use in your
    code. E.g. adding stdio.h enables you to print output and get
    input.

*** The C function ~puts~ needs a newline character ~\n~ to display the next line

    FALSE

    Feedback: puts stands for "put string" and that's what this
    function does. It does include a newline character unlike printf
    (= formatted print).

*** If the variable ~height~ is declared an ~int~, what's wrong with the following ~printf~ statement?

    ~printf("My height is %f", height);~

    TRUE:
    * The format specifier should be ~%d~

    FALSE:
    * The format specifier should be ~.2f~
    * There must be a newline character ~\n~ after ~%f~
    * The statement does not need a semicolon (;) at the end

*** When you print a variable with the wrong format, you get unpredictable numerical results

    TRUE

    Feedback: I demonstrated this in class (in [[https://github.com/birkenkrahe/cc100/blob/main/3_basics/variables.org#formatting-printout][~variables.org~]]). If
    you are in doubt, make the test yourself: declare an integer
    variable and print it with printf using the %f format specifier.

*** You want to display ~x = 234.5895484~ with 3-digit accuracy after the decimal point. Which formatting specifier is correct?

    TRUE:
    * ~printf("%.3f", x);~

    FALSE
    * ~printf("%.pf", x);~
    * ~printf("%.3d", x);~
    * ~printf("%3f", x);~

    Feedback: As Victor noticed, ~printf("%.pf", x);~ does not result
    in an error but in a strangely formatted output (without the
    number).

* C constants, naming - w6s15 (02/18/22)

  * What's wrong with this program? (It won't even compile.)
    *ANSWER*: there shouldn't be a semi-colon in the definition of
    the constant ~CONST_~ with the preprocessor (using ~#define~).
    #+name: 021822
    #+begin_src C :results output
      #include <stdio.h>
      #define CONST_ 100;

      int main(void) {
        int value = CONST_, newValue;

        newValue = value + 1;

        printf("%d %d %d\n", CONST_, value, newValue);
        return 0;
      }
    #+end_src

* Program assignment review, scanf - w7s16 (02/21/22)
** Compute the volume of a sphere

   * This is a fairly long set of solutions - I'm also explaining how
     to tackle reading input in Org-mode, which you don't need to know.
   * Below is also the solution to the extra credit problem (reading
     the radius input from the commandline).
   * Included are also a couple of exhibits with small mistakes -
     anonymized student submissions.

*** Problem

    * Write a program that computes the volume of a sphere with a
      10-meter radius, using the formula $v=4/3\times\pi r^{3}$.
    * Write the fraction $4/3$ as ~4.0f/3.0f~. (Try writing it as 4/3
      and see what happens.)
    * Remember that C does not have an exponentiation operator, so you
      need to write $r^{3}$ as ~r*r*r~.
    * Upload your solution program as a ~.c~ file or as a ~.org~ file
      to Schoology not later than 11 AM on Monday, February 21st. Make
      sure that your program actually runs without errors!
    * Be prepared to present your solution in class.

*** Solutions and pseudo solutions

    * In the first solution, we define the constant as a macro using
      ~#define~.
      #+name: volume1
      #+begin_src C :tangle volume1.c :includes <stdio.h>
        #define PI_CONST 3.141593 // macro declaration

        float volume, radius=10.0f; // type declaration

        volume = 4.0f/3.0f * PI_CONST * radius * radius * radius; // statement

        printf("The volume of a sphere of radius %.2f is %.2f\n",
               radius, volume); // display output
      #+end_src

      #+RESULTS: volume1
      : The volume of a sphere of radius 10.00 is 4188.79

    * What happens when you use ~4/3~ instead of ~4.0f/3.0f~ in the
      formula?
      #+name: volume_err1
      #+begin_src C
        #define PI_CONST 3.141593 // macro declaration

        float volume, radius=10.0f; // type declaration

        volume = 4/3 * PI_CONST * radius * radius * radius; // statement

        printf("The volume of a sphere of radius %.2f is %.2f\n",
               radius, volume); // display output
      #+end_src

      #+RESULTS: volume_err1
      : The volume of a sphere of radius 10.00 is 3141.59

    * What happens when you use integers instead of floating point numbers?
      #+name: volume_err2
      #+begin_src C
        #define PI_CONST 3.141593 // macro declaration

        int volume, radius=10; // type declaration

        volume = 4.0f/3.0f * PI_CONST * radius * radius * radius; // statement

        printf("The volume of a sphere of radius %d is %d\n",
               radius, volume); // display output
      #+end_src

      #+RESULTS: volume_err2
      : The volume of a sphere of radius 10 is 4188

    * What happens when you use a less accurate PI constant?
      #+name: volume_err3
      #+begin_src C
        #define PI_CONST 3.14 // macro declaration

        int volume, radius=10; // type declaration

        volume = 4.0f/3.0f * PI_CONST * radius * radius * radius; // statement

        printf("The volume of a sphere of radius %d is %d\n",
               radius, volume); // display output
      #+end_src

      #+RESULTS: volume_err3
      : The volume of a sphere of radius 10 is 4186

    * In the second solution, we include the constant using the math
      library ~math.h~.
      #+name: volume2
      #+begin_src C :tangle volume2.c :includes <stdio.h>
        #include <math.h>  // include math library with PI=M_PI

        float volume, radius=10.0f; // type declaration

        volume = 4.0f/3.0f * M_PI * radius * radius * radius; // statement

        printf("The volume of a sphere of radius %.2f is %.2f\n",
               radius, volume); // display output
      #+end_src

      #+RESULTS: volume2
      : The volume of a sphere of radius 10.00 is 4188.79

*** Reading input

    * For the expanded problem, we use the input function ~scanf~ for
      the ~radius~. Unfortunately, Emacs Org-mode will not wait for us
      to enter the input. You have to tangle the code block, compile
      and run the C file outside of Emacs, on the CMD shell (terminal).

    * In the code below, I'm using a trick - the Org-mode header
      argument ~cmdline~ will accept input from a file. This file,
      ~in.txt~, contains my "interactive" input.
      #+name: cmdline
      #+begin_src C :tangle volume3.c :includes <stdio.h> :cmdline < in.txt :results silent
        #include <math.h> // include math library

        float volume, radius; // declare types

        printf("Enter radius of sphere: \n");  // ask for input
        scanf("%f", &radius);                  // read input

        volume = (4.0f / 3.0f) * M_PI * radius * radius * radius; // statement

        printf("Volume (cubic meters): %.1f\n", volume); // display result
      #+end_src

    * To pass arguments to source code blocks, use ~var~ ([[https://orgmode.org/org.html#var][cp. manual]]).
      #+name: var
      #+begin_src C :var INPUT=10
        int radius = INPUT;
        printf("Input: %d", radius);
      #+end_src

      #+RESULTS: var
      : Input: 10

    * We can use this for a better solution: this code block can be run
      again and again like the compiled program, and we enter the
      variable ~radius~ as header ~:var RADIUS~.
      #+name: volume4
      #+begin_src C :tangle volume4.c :includes <stdio.h> :var RADIUS=12
        #include <math.h> // include math library

        float volume, radius; // declare types

        radius = RADIUS;

        volume = (4.0f / 3.0f) * M_PI * radius * radius * radius; // statement

        printf("Volume (cubic meters): %.1f\n", volume); // display result
      #+end_src

      #+RESULTS: volume4
      : Volume (cubic meters): 7238.2

    * See also:
      - [[https://emacs.stackexchange.com/questions/20001/is-it-possible-to-read-user-input-from-stdin-while-tangling-a-source-block][stackexchange (2018)]]
      - [[https://emacs.stackexchange.com/questions/15065/org-mode-babel-interactive-code-block-evaluation/15087#15087?newreg=2631f695948842baa572e7a89ded84be][stackexchange (2015)]]
      - [[https://stackoverflow.com/questions/12129038/how-to-pipe-input-to-a-src-block-as-stdin][stackoverflow (2017)]]

*** Volume Assignment review (class notes)

    * Exhibit 1
      #+name: exhibit_1
      #+begin_src C :tangle svolume.c :results raw
        #include <stdio.h>

        int main(void) {

          int radius, volume;
          radius = 10;
          volume = 4.0f/3.0f * 3.14 * radius * radius * radius;

          printf("Dimensions: %d\n", radius);
          printf("Volume (cubic meters): %d\n", volume);

          return 0;
        }
      #+end_src

      #+RESULTS: exhibit_1
      Dimensions: 10
      Volume (cubic meters): 4186

    * Exhibit 2
      #+name: exhibit_2
      #+begin_src C :include <stdio.h> :main yes :exports both
        #define PI 3.14;
        int main()
        {
          int r = 10;
          int v = 4.0f/3.0f * 3.141592 * r*r*r;

          printf("volume = %d",v);
        }
      #+end_src

      #+RESULTS: exhibit_2
      : volume = 4188

** Hello world function

   * The first solution does not show ~main()~ because it's taken care
     of by Emacs. ~hello()~ is defined inside ~main()~.
     #+name: hello_world_function_1
     #+begin_src C :main yes :includes <stdio.h> :results output
       // function definition
       int hello(void) {
         puts("hello world");
         return 0;
       }
       // function call
       hello();
     #+end_src

     #+RESULTS: hello_world_function_1
     : hello world

   * [X] The second solution is like the first but does show
     the envelopping ~main()~ function. For some reason, it does not
     print out a result, and the compiler warns: "~hello()~ defined but
     not used." What is that about?
     #+name: hello_world_function_2
     #+begin_src C :flags -Wall
       #include <stdio.h>

       int main(void) {
         int hello(void) {
           puts("hello world");
           return 0;
         }
         return 0;
       }
       // function call
       hello();
     #+end_src

     #+RESULTS: hello_world_function_2

   * The answer to the last question is: the ~hello()~ function cannot
     be called outside of ~main()~. If you move it back before the
     ~return~ statement, it works.
     #+name: hello_world_function_3
     #+begin_src C :flags -Wall :results output
       #include <stdio.h>

       int main(void) {
         int hello(void) {
           puts("hello world");
           return 0;
         }
         // function call
         hello();
         return 0;
       }
     #+end_src

     #+RESULTS: hello_world_function_3
     : hello world


   * A very short solution just for fun.
     #+name: hello_world_function_4
     #+begin_src C :flags -Wall
       int hello() {puts("hello world");return 0;} hello();
     #+end_src

     #+RESULTS: hello_world_function_4
     : hello world

** Be the compiler - solution

   * ~int~ is not an allowed name for a variable (protected keyword)
   * The string is not followed by a comma but by a semi-colon
   * The variables in ~printf~ are not recognized
   #+name: 022122
   #+begin_src C
     float int1=1.f, int2=2.f, int3;
     printf("%.2f\n", int3 = int1 + int2);
   #+end_src

   #+RESULTS: 022122
   : 3.0

* Compiling, LitProg, Program Layout - w7s19 (03/04/22)

  * [[https://man7.org/linux/man-pages/man1/gcc.1.html][GCC has a long UNIX manual page]], which contains all options for
    the command line.

  * You can add packages to Emacs using its package manager with ~M-x
    package-list-packages~. In the ~*Packages*~ buffer, add a package
    with ~i~, install it with ~x~, update packages with ~U x~.

  * For my notes and presentations, I use ~org-beautify-theme~ and
    ~org-bullets~, two layout themes. For ~org-bullets~ to run, you
    need to put the following code in your ~.emacs~ initialization
    file.
    #+name: org-bullets
    #+begin_src emacs-lisp
      (require 'org-bullets)
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    #+end_src

* Switch, case, break, pgm 7, pgm 8 - w11s26 (04/01/22)

** How do you attack a (non-trivial) programming exercise?

   Victor's process:
   1) What type of variables do I need to declare?
   2) Which control flow would I need? (if, switch)
   3) Start coding!

   Gaven's process:
   1) Read problem carefully
   2) Show what should come out
   3) What is input and what is output
   4) Decide variables...and continue with Victor's process
* References

  * <<birkenkrahe>> Birkenkrahe (Jan 11, 2022). Interactive shell
    vs. interactive notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL:
    youtu.be/8HJGz3IYoHI]].

  * <<gough>> Gough (2004). An Introduction to GCC. [[https://tfetimes.com/wp-content/uploads/2015/09/An_Introduction_to_GCC-Brian_Gough.pdf][URL: tfetimes.com.]]

  * <<koenig>> Koenig (Feb 4, 2020). Meet The Newest Liberal Art: Coding
    [blog]. [[https://www.edsurge.com/news/2020-02-05-meet-the-newest-liberal-art-coding][URL: www.edsurge.com.]]

  * <<lunduke>> Lunduke (June 28,2019). Without a GUI--How to Live Entirely in a
    Terminal [article]. [[https://www.linuxjournal.com/content/without-gui-how-live-entirely-terminal][URL: linuxjournal.com]].

  * <<segger>> Segger(Jan 18, 2022). Off the Charts - The best of our data
    journalism. [[https://view.e.economist.com/?qs=656e8edd261819ad127632bd9fc89d2693ab5b810851ce4bd3c9b136783bf9a66449c77fa31064988ea46b682a0e8efeb56fca106d505a3dcf51d920dc5bcf1b6f2e2e72407034bde705c7cfc6af5ec4][URL: economist.com.]]

  * <<stallman>> Stallman et al (2022). Using the GNU Compiler
    Collection. [[https://gcc.gnu.org/onlinedocs/gcc.pdf][URL: gcc.gnu.org.]]

* Footnotes

[fn:2] Suggestion to install GCC under MacOS [[https://codeforces.com/blog/entry/88063][here]] - have not tried
this yet myself. Perhaps you could, if you have a Mac, and let me
know? (1) First, you need to install HomeBrew from https://brew.sh/,
(2) Then, run ~brew install gcc~ in the terminal. (3) Type ~g++-11~ in
the terminal to see if successful. (4) Type ~sudo ln -s
/usr/local/bin/gcc-11 /usr/local/bin/gcc~.

[fn:1]From the GCC reference manual ([[stallman][Stallman et al, 2003]]):
#+begin_quote
~-Wall~ enables all the warnings about C constructions that some
users consider questionable, and that are easy to avoid (or modify
to prevent the warning).
#+end_quote
