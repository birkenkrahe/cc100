#+TITLE:Conditions
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP: overview hideblocks
#+OPTIONS: toc:1 ^:nil
#+PROPERTY: header-args:C :main yes
#+PROPERTY: header-args:C :includes <stdio.h>
#+PROPERTY: header-args:C :exports both
#+PROPERTY: header-args:C :results output
#+PROPERTY: header-args:C :comments both
#+INFOJS_OPT: :view:info
* README

  * Algorithms are the core of programming

  * Example for an algorithm: "When you come to a STOP sign, stop."

  * The human form of algorithm is heuristics

  * Example for a heuristic: "To get to the college, go straight."

  * For programming, you need both algorithms and heuristics

  * Useful tools to master = design algorithms (and heuristics)
    - Pseudocode (task flow description)
    - Flow charts (task flow visualization)

  * In this chapter, we go beyond simple statements and include
    logical conditions (like in the algorithm example above)

  * This section follows chapter 3 in Davenport/Vine (2015) and
    chapters 4 and 5 in King (2008).

* Operators in C

  * Mathematically, operators are really functions: ~f(i,j)=i+j~

  * C has many operators, both unary (~-1~) and binary (~1+1~)

  * Different programming languages differ greatly rgd. operators

  * Types of operators in C:

    | OPERATOR            | WHY                      | EXAMPLES  | EXPRESSION |
    |---------------------+--------------------------+-----------+------------|
    | Arithmetic          | To compute               | * + - / % | i * j + k  |
    | Relational          | To compare               | < > <= >= | i > j      |
    | Equality            | To compare (in/equality) | == !=     | i == j     |
    | Logical             | To confirm (truth)       | && !      | i && j     |
    | Assignment          | To change                | =         | i = j      |
    | Increment/decrement | To change stepwise       | ++, +-    | ++i        |

  * Conditional operators used in C:

    | OPERATOR | DESCRIPTION              | EXPRESSION | VALUE |
    |----------+--------------------------+------------+-------|
    | ==       | Equal                    | 5 == 5     | true  |
    | !=       | Not equal                | 5 != 5     | false |
    | >        | Greater than             | 5 > 5      | false |
    | <        | Less than                | 5 < 5      | false |
    | >=       | Greater than or equal to | 5 >= 5     | true  |
    | <=       | Less than or equal to    | 5 <= 5     | true  |

  * The value of an evaluated conditional operator is *Boolean*
    (logical)

* Pseudocode
** Overview

   * Pseudocode is a method to quickly write down/analyze an algorithm
     or a heuristic

   * The prefix pseudo- comes from Ancient Greek [[https://en.wiktionary.org/wiki/%CF%88%CE%B5%CF%85%CE%B4%CE%AE%CF%82][ψευδής]], meaning
     "lying", "false" or "untrue", as in "pseudoscience" or "pseudonym"

** Example

   * Example: player problem statement in [[problem1]] below:

     #+name: problem1
     #+begin_quote
     "Drink a health potion when a character's health is 100 or
     less. If health reaches 100 or more, resume battle."
     #+end_quote

   * Given the problem [[problem1]], this is the pseudocode [[pseudocode1]][fn:1]:

     #+name: pseudocode1
     #+begin_example C
     if health <= 100
       Drink health potion
     else
       Resume battle
     end if
     #+end_example

   * The code in [[pseudocode1]] would not compile as a C program (you can
     test yourself: which mistakes would the compiler find?[fn:2])

   * The conceptual "trick" with generating pseudocode from a prose
     description is to identify the condition so that you can perform a
     comparison (= apply a conditional operator) and act accordingly

** Practice

   * [X] Turn the following problem [[gold1]] into pseudocode!

     #+name: gold1
     #+begin_quote
     "Allow a player to deposit or withdraw gold from a game bank
     account."
     #+end_quote

   * [X] Given the problem [[gold1]], the pseudocode could be [[pseudogold1]]:

     #+name: pseudogold1
     #+begin_example C
     if action == deposit
        Deposit gold into account
     else
        Withdraw gold from account
     end if
     #+end_example

   * [ ] The problem from [[gold1]] is refined in [[gold2]]:

     #+name: gold2
     #+begin_quote
     "Allow a player to deposit or withdraw gold from a game bank
     account. If a player elects to withdraw gold, ensure that
     sufficient funds exist."
     #+end_quote

   * [ ] Given the refined problem [[gold2]], the pseudocode could be
     [[pseudogold2]]:

     #+name: pseudogold2
     #+begin_example C
     if action == deposit
        Deposit gold into account
     else
        if balance < amount requested
           Insufficient funds
        else
           Withdraw gold
        end if
     end if
     #+end_example

     Or it could be [[pseudogold3]]:

     #+name: pseudogold3
     #+begin_example C
     if action == deposit
        Deposit gold into account
     else
        if balance >= amount requested
           Withdraw gold
        else
           Insufficient funds
        end if
     end if
     #+end_example

     * Pseudocode does not need to compile or run so it is closer to a
       heuristic than to an exact algorithm.

     * Code however needs to be exact and is always algorithmic

* Flowcharts
** Overview

   * Flowcharts are popular among computing analysts and programmers

   * Flowcharts are a special case of process models

   * Process modeling is a key 21st century skill

   * Rather than use flowcharts, we use BPMN - Business Process Model
     and Notation - see figure [[bpmnfig]] below for an overview of the
     whole language (you can get this poster at [[https://www.signavio.com/downloads/short-reads/free-bpmn-2-0-poster/][SAP Signavio]]).

     #+name: bpmnfig
     #+attr_html: :width 500px
     #+caption: (Free) BPMN 2.0 poster from SAP Signavio
     [[./img/bpmn.png]]

** SAP Signavio

   * [[https://signavio.com][SAP Signavio]] is a state-of-the-art process modeling environment

   * It includes process mining and workflow management tools. The
     figure [[signavio]] below shows the app dashboard.

     #+name: signavio
     #+attr_html: :width 500px
     #+caption: SAP Signavio dashboard / explorer
     [[./img/signavio.png]]

   * Register in my Signavio workspace if you haven't done it yet

   * Use the link in Schoology to register

** Practice

   * [X] Open Signavio Process Manager

   * [X] Create a simple BPMN based on the battle [[problem1]].

     #+attr_html: :width 500px
     #+caption: Health potion algorithm (battle problem) as BPMN diagram
     [[./img/battle.png]]

   * [X] In the next models, change "Insufficient funds" to "Do not
     withdraw gold" (tasks need to be articulated as active).

   * [X] Create a model based on [[pseudogold1]].

     #+attr_html: :width 500px
     #+caption: Gold deposit algorithm as BPMN diagram - version 1
     [[./img/gold1.png]]

   * [X] Create a model based on [[pseudogold2]]

     #+attr_html: :width 500px
     #+caption: Gold deposit algorithm as BPMN diagram - version 2
     [[./img/gold2.png]]

   * What changes if you use [[pseudogold3]] instead?

     #+attr_html: :width 500px
     #+caption: Gold deposit algorithm as BPMN diagram - version 3
     [[./img/gold3.png]]

** Points to remember

   * Every model needs a pool = process owner
   * Conditions become gateways
   * Use active sentences for tasks
   * When the flow is split, it must be rejoined
   * All elements must be named
   * Do not change the size of elements
   * All elements can be "overloaded"

** BPMN elements

   * Roles (pools, lanes, participants)
   * Tasks (things to do)
   * Events (status)
   * Flow (between tasks or events)
   * Gateways (decision points, condition check)

* Simple and nested 'if' structures
** Overview and example

   * If structure in C is very similar to pseudocode

   * [[battle1]] is the C version of the pseudocode [[problem1]] from earlier.

     #+name: battle1
     #+begin_example C
     if (health <= 100)
       // drink health potion
     else
       //resume battle
     #+end_example

   * Differences: condition needs parentheses; no "end if" statement

   * The health check results in a Boolean answer: ~true~ or ~false~

   * To run, the program needs a declaration of the ~health~ variable

   * Multiple statements need to be included in braces

   * Here is a version that will run. The variable has been initialized

     #+name: battle2
     #+begin_src C :main yes :includes <stdio.h> :results output
       int health = 99;

       if (health <= 100) {
         // drink health potion
         printf("\nDrinking health potion!\n");
        }
        else {
          // resume battle
          printf("\nResuming battle!\n");
        }
     #+end_src

     #+RESULTS: battle2
     :
     : Drinking health potion!

** Battle by numbers

   * The last version [[battle3]] below reads input from a file.

     #+name: battleinput
     #+begin_src bash :results silent
       echo "1" > drink
     #+end_src

   * We only have two simple if structures, and no nesting.

     #+name: battle3
     #+begin_src C :tangle battle.c :main yes :includes <stdio.h> :cmdline < drink :results output
       int response = 0; // initialize response

       puts("\n\tIn-Battle Healing\n\n1:\tDrink health potion\n\n2:\tResume battle\n");

       printf("\nEnter your selection: ");
       scanf("%d", &response);

       if (response == 1)
         printf("\nDrinking health potion!\n");

       if (response == 2)
         printf("\nResuming battle!\n");

     #+end_src

   * You can also tangle the file and run ~battle.c~ from the
     commandline:

     #+begin_example bash
       C-c C-v t
       gcc -o battle battle.c
       battle
     #+end_example

* Boolean algebra

  * [ ] What is algebra about?[fn:3]

  * Algebra allows you to form small worlds with fixed laws so that
    you know exactly what's going on - what the output must be for a
    given input. This certainty is what is responsible for much of the
    magic of mathematics.

  * Boole's (or Boolean) algebra, or the algebra of logic, uses the
    values of TRUE (or 1) and FALSE (or 0) and the operators AND (or
    "conjunction"), OR (or "disjunction"), and NOT (or "negation").

  * Truth tables are the traditional way of showing Boolean scenarios:

    #+name: AND
    | p     | q     | p AND q   |
    |-------+-------+-----------|
    | TRUE  | TRUE  | TRUE      |
    | TRUE  | FALSE | FALSE     |
    | FALSE | TRUE  | FALSE     |
    | FALSE | FALSE | FALSE     |

    #+name: OR
    | p     | q     | p OR q     |
    |-------+-------+-----------|
    | TRUE  | TRUE  | TRUE      |
    | TRUE  | FALSE | TRUE      |
    | FALSE | TRUE  | TRUE      |
    | FALSE | FALSE | FALSE     |

    #+name: NOT
    | p     | NOT p    |
    |-------+----------|
    | TRUE  | FALSE    |
    | FALSE | TRUE     |

  * Using the three basic operators, other operators can be built. In
    electronics, and modeling, the "exclusive OR" operator or "XOR",
    is e.g. equivalent to (p AND NOT q) OR (NOT p AND q)

    #+name: XOR
    | p     | q     | p XOR q | P = p AND (NOT q) | Q = (NOT p) AND q | P OR Q |
    |-------+-------+---------+-------------------+-------------------+--------|
    | TRUE  | TRUE  | TRUE    | FALSE             | FALSE             | FALSE  |
    | TRUE  | FALSE | FALSE   | TRUE              | FALSE             | TRUE   |
    | FALSE | TRUE  | FALSE   | FALSE             | TRUE              | TRUE   |
    | FALSE | FALSE | TRUE    | FALSE             | FALSE             | FALSE  |

  * XOR is the operator that we've used in our BPMN models for
    pseudocode as a gateway operator - only one of its outcomes can be
    true but never both of them

  * [ ] What is the result of each of the following expressions?

    | Expression        | Result |
    |-------------------+--------|
    | 3 == 3 AND 4 == 4 |        |
    |-------------------+--------|
    | 3 == 4 AND 4 == 4 |        |
    |-------------------+--------|
    | 4 == 3 OR 4 == 4  |        |
    |-------------------+--------|
    | NOT ( 4 == 4 )    |        |
    |-------------------+--------|
    | NOT ( 3 == 4 )    |        |
    |-------------------+--------|

  * Algebraic operations are more elegant and insightful than truth
    tables. Watch "Proving Logical Equivalences without Truth Tables"
    [[logic][(2012)]] as an example.

* Order of operator operations

  * In compound operations (multiple operators), you need to know the
    order of operator precedence

  * C has almost 50 operators. The most unusual are compound
    increment/decrement operators[fn:4]:

    | STATEMENT  | COMPOUND | PREFIX | POSTFIX |
    |------------+----------+--------+---------|
    | i = i + 1; | i += 1;  | ++i;   | i++;    |
    | j = j - 1; | j -= 1;  | --i;   | i--;    |

  * ++ and -- have side effects: they modify the values of their
    operands: ++i yields i+1 and increments i:

    #+name: prefix
    #+begin_src C :results output :exports both
      int i = 1;
      printf("i is %d\n", ++i);  // prints "i is 2"
      printf("i is %d\n", i);  // prints "i is 2"
    #+end_src

    #+name: postfix
    #+begin_src C :results output :exports both
      int j = 1;
      printf("j is %d\n", j++);  // prints "j is 1"
      printf("j is %d\n", j);  // prints "j is 2"
    #+end_src

  * The table [[order]] shows a partial list of operators and their
    order of precedence from 1 (highest precedence, i.e. evaluated
    first) to 5 (lowest precedence, i.e. evaluated last)

    #+name: order
    | ORDER | OPERATOR            | SYMBOL           | ASSOCIATIVITY |
    |-------+---------------------+------------------+---------------|
    |     1 | increment (postfix) | ++               | left          |
    |       | decrement (postfix) | --               |               |
    |-------+---------------------+------------------+---------------|
    |     2 | increment (prefix)  | ++               | right         |
    |       | decrement (prefix)  | --               |               |
    |       | unary plus          | +                |               |
    |       | unary minus         | -                |               |
    |-------+---------------------+------------------+---------------|
    |     3 | multiplicative      | * / %            | left          |
    |-------+---------------------+------------------+---------------|
    |     4 | additive            | + -              | left          |
    |-------+---------------------+------------------+---------------|
    |     5 | assignment          | = *= /= %= += -= | right         |

  * Left/right associativity means that the operator groups from
    left/right. Examples:

    #+name: associativity
    | EXPRESSION | EQUIVALENCE | ASSOCIATIVITY |
    |------------+-------------+---------------|
    | i - j - k  | (i - j) - k | left          |
    | i * j / k  | (i * j) / k | left          |
    | -+j        | - (+j)      | right         |
    | i %=j      | i = (i % j) | right         |
    | i +=j      | i = (j + 1) | right         |

  * [ ] Make sure to write some of these out yourself and run
    examples. I found ~%=~ quite challenging: a modulus and assignment
    operator. ~i %= j~ computes ~i%j~ (i modulus j) and assigns it to
    ~i~.

    What is the value of ~i~ after running the code below?

    #+name: %=
    #+begin_src C
      int i = 10, j = 5;
      i%=j;
      printf("i was 10 and is now %d = 10 %% 5\n", i); 
    #+end_src

  * [ ] Using the table [[order]], parenthesize the following expression:

    #+name: simplify
    #+begin_example C
    a = b += c++ -d + --e / -f
    #+end_example

    Group 1:
    #+begin_example C
    a = b += (c++) -d + --e / -f
    #+end_example

    Group 2:
    #+begin_example C
    a = b += (c++) -d + (--e) / (-f)
    #+end_example

    Group 3:
    #+begin_example C
    a = b += ((c++) -d) + ((--e) / (-f))  // -,+ group from left to right
    #+end_example

    Group 4:
    #+begin_example C
    (a = (b += ((c++) -d) + ((--e) / (-f))))) // =, += group from right to left
    #+end_example

    Much better to write this like as a series of commands:
    #+begin_example C
    c++;  // c = c + 1
    e--;  // e = e - 1
    -f;   // f = -f
    c = c - d;
    e = e / f;
    b = b + c + e;
    a = b;
    #+end_example

* Compound if structures and input validation
** Booleans in C

   * C evaluates all non-zero values as TRUE, and all zero values as
     FALSE:

     #+name: boolean
     #+begin_src C :results output :exports both
       if (3) puts("3 is TRUE"); // non-zero expression
       if (!0) puts("0 is FALSE"); // !0 is literally non-zero
     #+end_src

   * The Boolean operators AND, OR and NOT are represented in C by
     the logical operators ~&&~, ~||~ and ~!~, respectively

** ! operator

   * The ! operator is a unary operator that is evaluated from the
     left. It is TRUE when its argument is FALSE, and vice versa.

   * [ ] If ~i = 100~, what is ~!i~?

   * [ ] If ~j = 0.5e-15~, what is ~!i~?

   * Let's check!

     #+name: negation
     #+begin_src C :results output :exports both
       int i = 100;
       double j = 1.e-15;
       printf("!%d is %d because %d is non-zero!\n", i, !i, i);
       printf("!(%.1e) is %d because %.1e is non-zero!\n", j, !j, j);
     #+end_src

** && operator

   * Evaluates a Boolean expression from left to right

   * Value is TRUE if and only if both sides of the operator are TRUE

   * Examples:

     #+name: &&_op_true
     #+begin_src C :exports both
       if ( 3 > 1 && 5 < 10 ) // = TRUE AND TRUE = TRUE
         printf("The entire expression is true.\n");
     #+end_src

     #+name: &&_op_false
     #+begin_src C :exports both
       if (!(3 > 5 && 5 < 5) ) // = NOT (FALSE AND FALSE) = TRUE
         printf("The entire expression is false.\n");
     #+end_src

** || operator

   * Evaluates a Boolean expression from left to right

   * It is FALSE if and only if both sides of the operator are FALSE

   * It is TRUE if either side of the operator is TRUE

   * Examples:

     #+name: ||_op_true
     #+begin_src C :exports both
       if ( 3 > 5 || 5 <= 5 ) // TRUE OR TRUE = TRUE
         printf("The entire expression is true.\n");
     #+end_src

     #+name: ||_op_false
     #+begin_src C :exports both
       if ( 3 > 5 || 6 < 5 ) { }// = FALSE OR FALSE = FALSE
       else printf("The entire expression is false.\n");
     #+end_src

   * Practice that using the GDrive notebook!

** Checking for upper and lower case

   * Characters are represented by ASCII[fn:5] character sets

   * E.g. ~a~ and ~A~ are represented by the ASCII codes 97 and 65,
     resp.

   * [ ] Let's check that.

     #+name: ascii_input
     #+begin_src bash :results silent
       echo "a A" > ascii
     #+end_src

     #+name: ascii
     #+begin_src C :cmdline < ascii :results output :export both
       char a, A;
       scanf("%c %c", &a, &A);
       printf("The ASCII value of %c is %d\n", a, a);
       printf("The ASCII value of %c is %d\n", A, A);
     #+end_src

   * User-friendly programs should use compound conditions to check
     for both lower and upper case letters:

     #+name: ascii_both
     #+begin_example C
     if (response == 'A' || response == 'a')
     #+end_example

   * Practice that using the GDrive notebook!

** Checking for a range of values

   * To validate input, you often need to check a range of values

   * This is a common use of compound conditions, logical and
     relational operators

   * We first create an input file ~num~.

     #+name: valid_input
     #+begin_src bash :results silent
       echo 5 > num
     #+end_src

   * [ ] What does the code in [[validate]] do? Will it run? What will the
     output be for our choice of input? 

     #+name: validate
     #+begin_src C :cmdline < num :exports both

       int response = 0;

       scanf("%d", &response);

       if ( response < 1 || response > 10 ) {
	 puts("Number not in range.");
	} else {
	 puts("Number in range.");
       }
     #+end_src

   * Head to the practice notebook for some challenging exercises!

* References

  * Davenport/Vine (2015) C Programming for the Absolute Beginner
    (3ed). Cengage Learning.
  * <<logic>> GVSUmath (Aug 10, 2012). Proving Logical Equivalences
    without Truth Tables [video]. [[https://youtu.be/iPbLzl2kMHA][URL: youtu.be/iPbLzl2kMHA]].
  * Kernighan/Ritchie (1978). The C Programming Language
    (1st). Prentice Hall.
  * King (2008). C Programming - A modern approach (2e). W A Norton.
  * Orgmode.org (n.d.). 16 Working with Source Code [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL:
    orgmode.org]]

* Footnotes

[fn:5] ASCII stands for the [[https://en.wikipedia.org/wiki/ASCII][American Standard Code for Information
Interchange]]. 

[fn:4]These operators were inherited from Ken Thompson's earlier B
language. They are not faster just shorter and more convenient.

[fn:3]Algebra is the branch of mathematics that allows you to
represent problems in the form of abstract, or formal,
expressions. The abstraction is encapsulated in the notion of a
variable (an expression of changing value), and of an operator acting
on one or more variables (a function having the variable as an
argument, and using it to compute something).

[fn:2]Undeclared variable ~health~, missing closure semi-colons after
the statements, functions ~Drink~ and ~Resume~ not known, and more.

[fn:1]In Org mode, you can use the language as an example header
argument to enable syntax highlighting. For pseudocode, this will of
course not work perfectly, since most syntax elements are not in C.
